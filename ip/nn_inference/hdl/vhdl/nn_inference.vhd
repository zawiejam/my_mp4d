-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nn_inference is
generic (
    C_S_AXI_AXI_CPU_ADDR_WIDTH : INTEGER := 13;
    C_S_AXI_AXI_CPU_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXI_CPU_AWVALID : IN STD_LOGIC;
    s_axi_AXI_CPU_AWREADY : OUT STD_LOGIC;
    s_axi_AXI_CPU_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_CPU_ADDR_WIDTH-1 downto 0);
    s_axi_AXI_CPU_WVALID : IN STD_LOGIC;
    s_axi_AXI_CPU_WREADY : OUT STD_LOGIC;
    s_axi_AXI_CPU_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_CPU_DATA_WIDTH-1 downto 0);
    s_axi_AXI_CPU_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_CPU_DATA_WIDTH/8-1 downto 0);
    s_axi_AXI_CPU_ARVALID : IN STD_LOGIC;
    s_axi_AXI_CPU_ARREADY : OUT STD_LOGIC;
    s_axi_AXI_CPU_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_CPU_ADDR_WIDTH-1 downto 0);
    s_axi_AXI_CPU_RVALID : OUT STD_LOGIC;
    s_axi_AXI_CPU_RREADY : IN STD_LOGIC;
    s_axi_AXI_CPU_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXI_CPU_DATA_WIDTH-1 downto 0);
    s_axi_AXI_CPU_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXI_CPU_BVALID : OUT STD_LOGIC;
    s_axi_AXI_CPU_BREADY : IN STD_LOGIC;
    s_axi_AXI_CPU_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of nn_inference is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "nn_inference_nn_inference,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.386000,HLS_SYN_LAT=30272,HLS_SYN_TPT=none,HLS_SYN_MEM=92,HLS_SYN_DSP=0,HLS_SYN_FF=21886,HLS_SYN_LUT=66834,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_C479F99A : STD_LOGIC_VECTOR (31 downto 0) := "11000100011110011111100110011010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_img_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer3_weights_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer3_weights_0_ce0 : STD_LOGIC;
    signal layer3_weights_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer3_weights_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer3_weights_1_ce0 : STD_LOGIC;
    signal layer3_weights_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer3_weights_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer3_weights_2_ce0 : STD_LOGIC;
    signal layer3_weights_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer3_weights_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer3_weights_3_ce0 : STD_LOGIC;
    signal layer3_weights_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_370 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_reg_393 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_2_reg_404 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_2_reg_416 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_4_reg_427 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_3_reg_439 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_6_reg_450 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_state13_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state15_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state16_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state17_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state18_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state19_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state20_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln39_reg_1157 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state22_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state23_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state24_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state25_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_state26_pp3_stage0_iter4 : BOOLEAN;
    signal ap_block_state27_pp3_stage0_iter5 : BOOLEAN;
    signal ap_block_state28_pp3_stage0_iter6 : BOOLEAN;
    signal ap_block_state29_pp3_stage0_iter7 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal ap_block_state31_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state32_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state33_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state34_pp4_stage0_iter3 : BOOLEAN;
    signal ap_block_state35_pp4_stage0_iter4 : BOOLEAN;
    signal ap_block_state36_pp4_stage0_iter5 : BOOLEAN;
    signal ap_block_state37_pp4_stage0_iter6 : BOOLEAN;
    signal ap_block_state38_pp4_stage0_iter7 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal ap_block_state40_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state41_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state42_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_state43_pp5_stage0_iter3 : BOOLEAN;
    signal ap_block_state44_pp5_stage0_iter4 : BOOLEAN;
    signal ap_block_state45_pp5_stage0_iter5 : BOOLEAN;
    signal ap_block_state46_pp5_stage0_iter6 : BOOLEAN;
    signal ap_block_state47_pp5_stage0_iter7 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal icmp_ln39_1_reg_1192 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal icmp_ln39_2_reg_1227 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal icmp_ln39_3_reg_1262 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_597_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_620 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal icmp_ln39_reg_1157_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp3_iter4 : STD_LOGIC := '0';
    signal icmp_ln39_1_reg_1192_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp4_iter4 : STD_LOGIC := '0';
    signal icmp_ln39_2_reg_1227_pp4_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp5_iter4 : STD_LOGIC := '0';
    signal icmp_ln39_3_reg_1262_pp5_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_13_fu_624_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_16_fu_641_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln39_fu_658_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_reg_1151 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal add_ln39_reg_1151_pp2_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_reg_1151_pp2_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_reg_1151_pp2_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_reg_1151_pp2_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln39_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_reg_1157_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_reg_1157_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_reg_1157_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_reg_1157_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_reg_1157_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_681_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal add_ln39_1_fu_689_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_1_reg_1186 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal add_ln39_1_reg_1186_pp3_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_1_reg_1186_pp3_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_1_reg_1186_pp3_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_1_reg_1186_pp3_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln39_1_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_1_reg_1192_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_1_reg_1192_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_1_reg_1192_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_1_reg_1192_pp3_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_1_reg_1192_pp3_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_712_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter7 : STD_LOGIC := '0';
    signal add_ln39_2_fu_720_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_2_reg_1221 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal add_ln39_2_reg_1221_pp4_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_2_reg_1221_pp4_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_2_reg_1221_pp4_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_2_reg_1221_pp4_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln39_2_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_2_reg_1227_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_2_reg_1227_pp4_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_2_reg_1227_pp4_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_2_reg_1227_pp4_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_2_reg_1227_pp4_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_743_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp4_iter7 : STD_LOGIC := '0';
    signal add_ln39_3_fu_751_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_3_reg_1256 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal add_ln39_3_reg_1256_pp5_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_3_reg_1256_pp5_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_3_reg_1256_pp5_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_3_reg_1256_pp5_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln39_3_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_3_reg_1262_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_3_reg_1262_pp5_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_3_reg_1262_pp5_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_3_reg_1262_pp5_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_3_reg_1262_pp5_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_774_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp5_iter7 : STD_LOGIC := '0';
    signal and_ln83_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln83_reg_1291 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal max_val_1_fu_824_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_1_reg_1296 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln83_2_fu_909_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln83_2_reg_1303 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal max_val_3_fu_915_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_3_reg_1309 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln83_4_fu_999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln83_4_reg_1316 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal max_val_5_fu_1005_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_5_reg_1321 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln83_10_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_10_reg_1327 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal icmp_ln83_11_fu_1053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_11_reg_1332 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_12_fu_1059_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_12_reg_1337 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_13_fu_1065_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_13_reg_1342 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_hw_act_layer2_fu_592_ap_ready : STD_LOGIC;
    signal grp_hw_act_layer2_fu_592_ap_done : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state13 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state22 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter6 : STD_LOGIC := '0';
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state31 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter6 : STD_LOGIC := '0';
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state40 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter6 : STD_LOGIC := '0';
    signal temp_output_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_output_0_ce0 : STD_LOGIC;
    signal temp_output_0_we0 : STD_LOGIC;
    signal temp_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output_0_ce1 : STD_LOGIC;
    signal temp_output_0_we1 : STD_LOGIC;
    signal temp_output_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output2_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_output2_0_ce0 : STD_LOGIC;
    signal temp_output2_0_we0 : STD_LOGIC;
    signal temp_output2_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output2_0_ce1 : STD_LOGIC;
    signal temp_output2_0_we1 : STD_LOGIC;
    signal temp_output2_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hwmm_layer1_fu_462_ap_start : STD_LOGIC;
    signal grp_hwmm_layer1_fu_462_ap_done : STD_LOGIC;
    signal grp_hwmm_layer1_fu_462_ap_idle : STD_LOGIC;
    signal grp_hwmm_layer1_fu_462_ap_ready : STD_LOGIC;
    signal grp_hwmm_layer1_fu_462_input_img_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_hwmm_layer1_fu_462_input_img_ce0 : STD_LOGIC;
    signal grp_hwmm_layer1_fu_462_output_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hwmm_layer1_fu_462_output_0_ce0 : STD_LOGIC;
    signal grp_hwmm_layer1_fu_462_output_0_we0 : STD_LOGIC;
    signal grp_hwmm_layer1_fu_462_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hwmm_layer1_fu_462_grp_fu_597_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hwmm_layer1_fu_462_grp_fu_597_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hwmm_layer1_fu_462_grp_fu_597_p_dout0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hwmm_layer1_fu_462_grp_fu_597_p_ce : STD_LOGIC;
    signal grp_hwmm_layer2_fu_533_ap_start : STD_LOGIC;
    signal grp_hwmm_layer2_fu_533_ap_done : STD_LOGIC;
    signal grp_hwmm_layer2_fu_533_ap_idle : STD_LOGIC;
    signal grp_hwmm_layer2_fu_533_ap_ready : STD_LOGIC;
    signal grp_hwmm_layer2_fu_533_input_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hwmm_layer2_fu_533_input_0_ce0 : STD_LOGIC;
    signal grp_hwmm_layer2_fu_533_output_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hwmm_layer2_fu_533_output_0_ce0 : STD_LOGIC;
    signal grp_hwmm_layer2_fu_533_output_0_we0 : STD_LOGIC;
    signal grp_hwmm_layer2_fu_533_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hwmm_layer2_fu_533_grp_fu_597_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hwmm_layer2_fu_533_grp_fu_597_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hwmm_layer2_fu_533_grp_fu_597_p_dout0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hwmm_layer2_fu_533_grp_fu_597_p_ce : STD_LOGIC;
    signal grp_hw_act_layer1_fu_587_ap_start : STD_LOGIC;
    signal grp_hw_act_layer1_fu_587_ap_done : STD_LOGIC;
    signal grp_hw_act_layer1_fu_587_ap_idle : STD_LOGIC;
    signal grp_hw_act_layer1_fu_587_ap_ready : STD_LOGIC;
    signal grp_hw_act_layer1_fu_587_output_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hw_act_layer1_fu_587_output_0_ce0 : STD_LOGIC;
    signal grp_hw_act_layer1_fu_587_output_0_we0 : STD_LOGIC;
    signal grp_hw_act_layer1_fu_587_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer1_fu_587_output_0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hw_act_layer1_fu_587_output_0_ce1 : STD_LOGIC;
    signal grp_hw_act_layer1_fu_587_output_0_we1 : STD_LOGIC;
    signal grp_hw_act_layer1_fu_587_output_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer1_fu_587_grp_fu_606_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer1_fu_587_grp_fu_606_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer1_fu_587_grp_fu_606_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hw_act_layer1_fu_587_grp_fu_606_p_dout0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_hw_act_layer1_fu_587_grp_fu_606_p_ce : STD_LOGIC;
    signal grp_hw_act_layer1_fu_587_grp_fu_1347_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer1_fu_587_grp_fu_1347_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer1_fu_587_grp_fu_1347_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hw_act_layer1_fu_587_grp_fu_1347_p_dout0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_hw_act_layer1_fu_587_grp_fu_1347_p_ce : STD_LOGIC;
    signal grp_hw_act_layer2_fu_592_ap_start : STD_LOGIC;
    signal grp_hw_act_layer2_fu_592_ap_idle : STD_LOGIC;
    signal grp_hw_act_layer2_fu_592_output_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hw_act_layer2_fu_592_output_0_ce0 : STD_LOGIC;
    signal grp_hw_act_layer2_fu_592_output_0_we0 : STD_LOGIC;
    signal grp_hw_act_layer2_fu_592_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer2_fu_592_output_0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hw_act_layer2_fu_592_output_0_ce1 : STD_LOGIC;
    signal grp_hw_act_layer2_fu_592_output_0_we1 : STD_LOGIC;
    signal grp_hw_act_layer2_fu_592_output_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer2_fu_592_grp_fu_606_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer2_fu_592_grp_fu_606_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer2_fu_592_grp_fu_606_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hw_act_layer2_fu_592_grp_fu_606_p_dout0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_hw_act_layer2_fu_592_grp_fu_606_p_ce : STD_LOGIC;
    signal grp_hw_act_layer2_fu_592_grp_fu_1347_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer2_fu_592_grp_fu_1347_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer2_fu_592_grp_fu_1347_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hw_act_layer2_fu_592_grp_fu_1347_p_dout0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_hw_act_layer2_fu_592_grp_fu_1347_p_ce : STD_LOGIC;
    signal empty_12_reg_348 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond259_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_15_reg_359 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond248_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_k_phi_fu_374_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_k_1_phi_fu_397_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_phi_mux_k_2_phi_fu_420_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal ap_phi_mux_k_3_phi_fu_443_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal grp_hwmm_layer1_fu_462_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_hwmm_layer2_fu_533_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_hw_act_layer1_fu_587_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_hw_act_layer2_fu_592_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal p_cast_fu_636_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast1_fu_653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_cast_fu_670_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_1_cast_fu_701_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_2_cast_fu_732_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_3_cast_fu_763_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_597_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_597_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_606_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_606_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal grp_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln83_fu_782_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_786_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln83_fu_796_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln83_1_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_2_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln83_1_fu_832_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln83_2_fu_850_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_836_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln83_1_fu_846_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln83_3_fu_873_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_2_fu_867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_853_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln83_2_fu_863_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln83_5_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_4_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_3_fu_879_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_4_fu_897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln83_1_fu_903_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln83_3_fu_922_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln83_4_fu_940_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_926_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln83_3_fu_936_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln83_7_fu_963_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_6_fu_957_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_943_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln83_4_fu_953_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln83_9_fu_981_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_8_fu_975_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_5_fu_969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_6_fu_987_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln83_3_fu_993_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln83_5_fu_1012_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln83_6_fu_1030_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1016_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln83_5_fu_1026_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_9_fu_1033_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln83_6_fu_1043_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal or_ln83_fu_1074_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln83_fu_1071_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_idx_fu_1078_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln83_7_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_8_fu_1094_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln83_5_fu_1098_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln83_6_fu_1104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_1_fu_1118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_fu_1110_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln83_fu_1086_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal max_idx_2_fu_1123_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_597_ce : STD_LOGIC;
    signal grp_fu_606_ce : STD_LOGIC;
    signal grp_fu_606_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_681_in_valid : STD_LOGIC;
    signal grp_fu_712_in_valid : STD_LOGIC;
    signal grp_fu_743_in_valid : STD_LOGIC;
    signal grp_fu_774_in_valid : STD_LOGIC;
    signal grp_fu_1347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1347_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1347_ce : STD_LOGIC;
    signal grp_fu_1347_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal grp_fu_681_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_712_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_743_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_774_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component nn_inference_hwmm_layer1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_img_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_img_ce0 : OUT STD_LOGIC;
        input_img_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_0_ce0 : OUT STD_LOGIC;
        output_0_we0 : OUT STD_LOGIC;
        output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_597_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_597_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_597_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_597_p_ce : OUT STD_LOGIC );
    end component;


    component nn_inference_hwmm_layer2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_0_ce0 : OUT STD_LOGIC;
        output_0_we0 : OUT STD_LOGIC;
        output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_597_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_597_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_597_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_597_p_ce : OUT STD_LOGIC );
    end component;


    component nn_inference_hw_act_layer1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_0_ce0 : OUT STD_LOGIC;
        output_0_we0 : OUT STD_LOGIC;
        output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_0_ce1 : OUT STD_LOGIC;
        output_0_we1 : OUT STD_LOGIC;
        output_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_606_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_606_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_606_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_606_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_606_p_ce : OUT STD_LOGIC;
        grp_fu_1347_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1347_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1347_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_1347_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_1347_p_ce : OUT STD_LOGIC );
    end component;


    component nn_inference_hw_act_layer2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_0_ce0 : OUT STD_LOGIC;
        output_0_we0 : OUT STD_LOGIC;
        output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_0_ce1 : OUT STD_LOGIC;
        output_0_we1 : OUT STD_LOGIC;
        output_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_606_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_606_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_606_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_606_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_606_p_ce : OUT STD_LOGIC;
        grp_fu_1347_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1347_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1347_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_1347_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_1347_p_ce : OUT STD_LOGIC );
    end component;


    component nn_inference_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_inference_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component nn_inference_facc_32ns_32ns_1ns_32_3_no_dsp_1 IS
    generic (
        DWIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        ce : IN STD_LOGIC;
        in_data : IN STD_LOGIC_VECTOR (31 downto 0);
        in_last : IN STD_LOGIC_VECTOR (0 downto 0);
        in_valid : IN STD_LOGIC;
        out_data : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_inference_layer3_weights_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_inference_layer3_weights_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_inference_layer3_weights_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_inference_layer3_weights_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_inference_temp_output_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_inference_temp_output2_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_inference_AXI_CPU_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        input_img_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        input_img_ce0 : IN STD_LOGIC;
        input_img_q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    layer3_weights_0_U : component nn_inference_layer3_weights_0
    generic map (
        DataWidth => 32,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => layer3_weights_0_address0,
        ce0 => layer3_weights_0_ce0,
        q0 => layer3_weights_0_q0);

    layer3_weights_1_U : component nn_inference_layer3_weights_1
    generic map (
        DataWidth => 32,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => layer3_weights_1_address0,
        ce0 => layer3_weights_1_ce0,
        q0 => layer3_weights_1_q0);

    layer3_weights_2_U : component nn_inference_layer3_weights_2
    generic map (
        DataWidth => 32,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => layer3_weights_2_address0,
        ce0 => layer3_weights_2_ce0,
        q0 => layer3_weights_2_q0);

    layer3_weights_3_U : component nn_inference_layer3_weights_3
    generic map (
        DataWidth => 32,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => layer3_weights_3_address0,
        ce0 => layer3_weights_3_ce0,
        q0 => layer3_weights_3_q0);

    AXI_CPU_s_axi_U : component nn_inference_AXI_CPU_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXI_CPU_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXI_CPU_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXI_CPU_AWVALID,
        AWREADY => s_axi_AXI_CPU_AWREADY,
        AWADDR => s_axi_AXI_CPU_AWADDR,
        WVALID => s_axi_AXI_CPU_WVALID,
        WREADY => s_axi_AXI_CPU_WREADY,
        WDATA => s_axi_AXI_CPU_WDATA,
        WSTRB => s_axi_AXI_CPU_WSTRB,
        ARVALID => s_axi_AXI_CPU_ARVALID,
        ARREADY => s_axi_AXI_CPU_ARREADY,
        ARADDR => s_axi_AXI_CPU_ARADDR,
        RVALID => s_axi_AXI_CPU_RVALID,
        RREADY => s_axi_AXI_CPU_RREADY,
        RDATA => s_axi_AXI_CPU_RDATA,
        RRESP => s_axi_AXI_CPU_RRESP,
        BVALID => s_axi_AXI_CPU_BVALID,
        BREADY => s_axi_AXI_CPU_BREADY,
        BRESP => s_axi_AXI_CPU_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        input_img_address0 => grp_hwmm_layer1_fu_462_input_img_address0,
        input_img_ce0 => grp_hwmm_layer1_fu_462_input_img_ce0,
        input_img_q0 => input_img_q0);

    temp_output_0_U : component nn_inference_temp_output_0
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => temp_output_0_address0,
        ce0 => temp_output_0_ce0,
        we0 => temp_output_0_we0,
        d0 => temp_output_0_d0,
        q0 => temp_output_0_q0,
        address1 => grp_hw_act_layer1_fu_587_output_0_address1,
        ce1 => temp_output_0_ce1,
        we1 => temp_output_0_we1,
        d1 => grp_hw_act_layer1_fu_587_output_0_d1,
        q1 => temp_output_0_q1);

    temp_output2_0_U : component nn_inference_temp_output2_0
    generic map (
        DataWidth => 32,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => temp_output2_0_address0,
        ce0 => temp_output2_0_ce0,
        we0 => temp_output2_0_we0,
        d0 => temp_output2_0_d0,
        q0 => temp_output2_0_q0,
        address1 => grp_hw_act_layer2_fu_592_output_0_address1,
        ce1 => temp_output2_0_ce1,
        we1 => temp_output2_0_we1,
        d1 => grp_hw_act_layer2_fu_592_output_0_d1,
        q1 => temp_output2_0_q1);

    grp_hwmm_layer1_fu_462 : component nn_inference_hwmm_layer1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_hwmm_layer1_fu_462_ap_start,
        ap_done => grp_hwmm_layer1_fu_462_ap_done,
        ap_idle => grp_hwmm_layer1_fu_462_ap_idle,
        ap_ready => grp_hwmm_layer1_fu_462_ap_ready,
        input_img_address0 => grp_hwmm_layer1_fu_462_input_img_address0,
        input_img_ce0 => grp_hwmm_layer1_fu_462_input_img_ce0,
        input_img_q0 => input_img_q0,
        output_0_address0 => grp_hwmm_layer1_fu_462_output_0_address0,
        output_0_ce0 => grp_hwmm_layer1_fu_462_output_0_ce0,
        output_0_we0 => grp_hwmm_layer1_fu_462_output_0_we0,
        output_0_d0 => grp_hwmm_layer1_fu_462_output_0_d0,
        grp_fu_597_p_din0 => grp_hwmm_layer1_fu_462_grp_fu_597_p_din0,
        grp_fu_597_p_din1 => grp_hwmm_layer1_fu_462_grp_fu_597_p_din1,
        grp_fu_597_p_dout0 => grp_hwmm_layer1_fu_462_grp_fu_597_p_dout0,
        grp_fu_597_p_ce => grp_hwmm_layer1_fu_462_grp_fu_597_p_ce);

    grp_hwmm_layer2_fu_533 : component nn_inference_hwmm_layer2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_hwmm_layer2_fu_533_ap_start,
        ap_done => grp_hwmm_layer2_fu_533_ap_done,
        ap_idle => grp_hwmm_layer2_fu_533_ap_idle,
        ap_ready => grp_hwmm_layer2_fu_533_ap_ready,
        input_0_address0 => grp_hwmm_layer2_fu_533_input_0_address0,
        input_0_ce0 => grp_hwmm_layer2_fu_533_input_0_ce0,
        input_0_q0 => temp_output_0_q0,
        output_0_address0 => grp_hwmm_layer2_fu_533_output_0_address0,
        output_0_ce0 => grp_hwmm_layer2_fu_533_output_0_ce0,
        output_0_we0 => grp_hwmm_layer2_fu_533_output_0_we0,
        output_0_d0 => grp_hwmm_layer2_fu_533_output_0_d0,
        grp_fu_597_p_din0 => grp_hwmm_layer2_fu_533_grp_fu_597_p_din0,
        grp_fu_597_p_din1 => grp_hwmm_layer2_fu_533_grp_fu_597_p_din1,
        grp_fu_597_p_dout0 => grp_hwmm_layer2_fu_533_grp_fu_597_p_dout0,
        grp_fu_597_p_ce => grp_hwmm_layer2_fu_533_grp_fu_597_p_ce);

    grp_hw_act_layer1_fu_587 : component nn_inference_hw_act_layer1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_hw_act_layer1_fu_587_ap_start,
        ap_done => grp_hw_act_layer1_fu_587_ap_done,
        ap_idle => grp_hw_act_layer1_fu_587_ap_idle,
        ap_ready => grp_hw_act_layer1_fu_587_ap_ready,
        output_0_address0 => grp_hw_act_layer1_fu_587_output_0_address0,
        output_0_ce0 => grp_hw_act_layer1_fu_587_output_0_ce0,
        output_0_we0 => grp_hw_act_layer1_fu_587_output_0_we0,
        output_0_d0 => grp_hw_act_layer1_fu_587_output_0_d0,
        output_0_q0 => temp_output_0_q0,
        output_0_address1 => grp_hw_act_layer1_fu_587_output_0_address1,
        output_0_ce1 => grp_hw_act_layer1_fu_587_output_0_ce1,
        output_0_we1 => grp_hw_act_layer1_fu_587_output_0_we1,
        output_0_d1 => grp_hw_act_layer1_fu_587_output_0_d1,
        output_0_q1 => temp_output_0_q1,
        grp_fu_606_p_din0 => grp_hw_act_layer1_fu_587_grp_fu_606_p_din0,
        grp_fu_606_p_din1 => grp_hw_act_layer1_fu_587_grp_fu_606_p_din1,
        grp_fu_606_p_opcode => grp_hw_act_layer1_fu_587_grp_fu_606_p_opcode,
        grp_fu_606_p_dout0 => grp_hw_act_layer1_fu_587_grp_fu_606_p_dout0,
        grp_fu_606_p_ce => grp_hw_act_layer1_fu_587_grp_fu_606_p_ce,
        grp_fu_1347_p_din0 => grp_hw_act_layer1_fu_587_grp_fu_1347_p_din0,
        grp_fu_1347_p_din1 => grp_hw_act_layer1_fu_587_grp_fu_1347_p_din1,
        grp_fu_1347_p_opcode => grp_hw_act_layer1_fu_587_grp_fu_1347_p_opcode,
        grp_fu_1347_p_dout0 => grp_hw_act_layer1_fu_587_grp_fu_1347_p_dout0,
        grp_fu_1347_p_ce => grp_hw_act_layer1_fu_587_grp_fu_1347_p_ce);

    grp_hw_act_layer2_fu_592 : component nn_inference_hw_act_layer2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_hw_act_layer2_fu_592_ap_start,
        ap_done => grp_hw_act_layer2_fu_592_ap_done,
        ap_idle => grp_hw_act_layer2_fu_592_ap_idle,
        ap_ready => grp_hw_act_layer2_fu_592_ap_ready,
        output_0_address0 => grp_hw_act_layer2_fu_592_output_0_address0,
        output_0_ce0 => grp_hw_act_layer2_fu_592_output_0_ce0,
        output_0_we0 => grp_hw_act_layer2_fu_592_output_0_we0,
        output_0_d0 => grp_hw_act_layer2_fu_592_output_0_d0,
        output_0_q0 => temp_output2_0_q0,
        output_0_address1 => grp_hw_act_layer2_fu_592_output_0_address1,
        output_0_ce1 => grp_hw_act_layer2_fu_592_output_0_ce1,
        output_0_we1 => grp_hw_act_layer2_fu_592_output_0_we1,
        output_0_d1 => grp_hw_act_layer2_fu_592_output_0_d1,
        output_0_q1 => temp_output2_0_q1,
        grp_fu_606_p_din0 => grp_hw_act_layer2_fu_592_grp_fu_606_p_din0,
        grp_fu_606_p_din1 => grp_hw_act_layer2_fu_592_grp_fu_606_p_din1,
        grp_fu_606_p_opcode => grp_hw_act_layer2_fu_592_grp_fu_606_p_opcode,
        grp_fu_606_p_dout0 => grp_hw_act_layer2_fu_592_grp_fu_606_p_dout0,
        grp_fu_606_p_ce => grp_hw_act_layer2_fu_592_grp_fu_606_p_ce,
        grp_fu_1347_p_din0 => grp_hw_act_layer2_fu_592_grp_fu_1347_p_din0,
        grp_fu_1347_p_din1 => grp_hw_act_layer2_fu_592_grp_fu_1347_p_din1,
        grp_fu_1347_p_opcode => grp_hw_act_layer2_fu_592_grp_fu_1347_p_opcode,
        grp_fu_1347_p_dout0 => grp_hw_act_layer2_fu_592_grp_fu_1347_p_dout0,
        grp_fu_1347_p_ce => grp_hw_act_layer2_fu_592_grp_fu_1347_p_ce);

    fmul_32ns_32ns_32_4_max_dsp_1_U128 : component nn_inference_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_597_p0,
        din1 => grp_fu_597_p1,
        ce => grp_fu_597_ce,
        dout => grp_fu_597_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U129 : component nn_inference_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_606_p0,
        din1 => grp_fu_606_p1,
        ce => grp_fu_606_ce,
        opcode => grp_fu_606_opcode,
        dout => grp_fu_606_p2);

    facc_32ns_32ns_1ns_32_3_no_dsp_1_U130 : component nn_inference_facc_32ns_32ns_1ns_32_3_no_dsp_1
    generic map (
        DWIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        ce => ap_const_logic_1,
        in_data => reg_620,
        in_last => grp_fu_681_p2,
        in_valid => grp_fu_681_in_valid,
        out_data => grp_fu_681_p3);

    facc_32ns_32ns_1ns_32_3_no_dsp_1_U131 : component nn_inference_facc_32ns_32ns_1ns_32_3_no_dsp_1
    generic map (
        DWIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        ce => ap_const_logic_1,
        in_data => reg_620,
        in_last => grp_fu_712_p2,
        in_valid => grp_fu_712_in_valid,
        out_data => grp_fu_712_p3);

    facc_32ns_32ns_1ns_32_3_no_dsp_1_U132 : component nn_inference_facc_32ns_32ns_1ns_32_3_no_dsp_1
    generic map (
        DWIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        ce => ap_const_logic_1,
        in_data => reg_620,
        in_last => grp_fu_743_p2,
        in_valid => grp_fu_743_in_valid,
        out_data => grp_fu_743_p3);

    facc_32ns_32ns_1ns_32_3_no_dsp_1_U133 : component nn_inference_facc_32ns_32ns_1ns_32_3_no_dsp_1
    generic map (
        DWIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        ce => ap_const_logic_1,
        in_data => reg_620,
        in_last => grp_fu_774_p2,
        in_valid => grp_fu_774_in_valid,
        out_data => grp_fu_774_p3);

    fcmp_32ns_32ns_1_2_no_dsp_1_U134 : component nn_inference_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1347_p0,
        din1 => grp_fu_1347_p1,
        ce => grp_fu_1347_ce,
        opcode => grp_fu_1347_opcode,
        dout => grp_fu_1347_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((grp_hw_act_layer2_fu_592_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state13)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state13);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                elsif (((grp_hw_act_layer2_fu_592_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state22) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state22)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state22);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    ap_enable_reg_pp3_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state31) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state31)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state31);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter6 <= ap_enable_reg_pp4_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter7 <= ap_enable_reg_pp4_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp4_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state40) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state40)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state40);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter4 <= ap_enable_reg_pp5_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter5 <= ap_enable_reg_pp5_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter6 <= ap_enable_reg_pp5_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter7 <= ap_enable_reg_pp5_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                    ap_enable_reg_pp5_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hw_act_layer1_fu_587_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_hw_act_layer1_fu_587_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_hw_act_layer1_fu_587_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hw_act_layer1_fu_587_ap_ready = ap_const_logic_1)) then 
                    grp_hw_act_layer1_fu_587_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hw_act_layer2_fu_592_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_hw_act_layer2_fu_592_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_hw_act_layer2_fu_592_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hw_act_layer2_fu_592_ap_ready = ap_const_logic_1)) then 
                    grp_hw_act_layer2_fu_592_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hwmm_layer1_fu_462_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_hwmm_layer1_fu_462_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_hwmm_layer1_fu_462_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hwmm_layer1_fu_462_ap_ready = ap_const_logic_1)) then 
                    grp_hwmm_layer1_fu_462_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hwmm_layer2_fu_533_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_hwmm_layer2_fu_533_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_hwmm_layer2_fu_533_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hwmm_layer2_fu_533_ap_ready = ap_const_logic_1)) then 
                    grp_hwmm_layer2_fu_533_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_12_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond259_fu_630_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_12_reg_348 <= empty_13_fu_624_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_12_reg_348 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    empty_15_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond248_fu_647_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                empty_15_reg_359 <= empty_16_fu_641_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                empty_15_reg_359 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    k_1_reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                k_1_reg_393 <= ap_const_lv5_0;
            elsif (((icmp_ln39_1_reg_1192 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                k_1_reg_393 <= add_ln39_1_reg_1186;
            end if; 
        end if;
    end process;

    k_2_reg_416_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                k_2_reg_416 <= ap_const_lv5_0;
            elsif (((icmp_ln39_2_reg_1227 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                k_2_reg_416 <= add_ln39_2_reg_1221;
            end if; 
        end if;
    end process;

    k_3_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                k_3_reg_439 <= ap_const_lv5_0;
            elsif (((icmp_ln39_3_reg_1262 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
                k_3_reg_439 <= add_ln39_3_reg_1256;
            end if; 
        end if;
    end process;

    k_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_hw_act_layer2_fu_592_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                k_reg_370 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln39_reg_1157 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then 
                k_reg_370 <= add_ln39_reg_1151;
            end if; 
        end if;
    end process;

    sum_2_reg_404_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                sum_2_reg_404 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp3_iter7 = ap_const_logic_1) and (icmp_ln39_1_reg_1192_pp3_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                sum_2_reg_404 <= grp_fu_712_p3;
            end if; 
        end if;
    end process;

    sum_4_reg_427_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                sum_4_reg_427 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp4_iter7 = ap_const_logic_1) and (icmp_ln39_2_reg_1227_pp4_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                sum_4_reg_427 <= grp_fu_743_p3;
            end if; 
        end if;
    end process;

    sum_6_reg_450_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                sum_6_reg_450 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp5_iter7 = ap_const_logic_1) and (icmp_ln39_3_reg_1262_pp5_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
                sum_6_reg_450 <= grp_fu_774_p3;
            end if; 
        end if;
    end process;

    sum_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_hw_act_layer2_fu_592_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                sum_reg_381 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp2_iter7 = ap_const_logic_1) and (icmp_ln39_reg_1157_pp2_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                sum_reg_381 <= grp_fu_681_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                add_ln39_1_reg_1186 <= add_ln39_1_fu_689_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                add_ln39_1_reg_1186_pp3_iter1_reg <= add_ln39_1_reg_1186;
                icmp_ln39_1_reg_1192 <= icmp_ln39_1_fu_695_p2;
                icmp_ln39_1_reg_1192_pp3_iter1_reg <= icmp_ln39_1_reg_1192;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                add_ln39_1_reg_1186_pp3_iter2_reg <= add_ln39_1_reg_1186_pp3_iter1_reg;
                add_ln39_1_reg_1186_pp3_iter3_reg <= add_ln39_1_reg_1186_pp3_iter2_reg;
                add_ln39_1_reg_1186_pp3_iter4_reg <= add_ln39_1_reg_1186_pp3_iter3_reg;
                icmp_ln39_1_reg_1192_pp3_iter2_reg <= icmp_ln39_1_reg_1192_pp3_iter1_reg;
                icmp_ln39_1_reg_1192_pp3_iter3_reg <= icmp_ln39_1_reg_1192_pp3_iter2_reg;
                icmp_ln39_1_reg_1192_pp3_iter4_reg <= icmp_ln39_1_reg_1192_pp3_iter3_reg;
                icmp_ln39_1_reg_1192_pp3_iter5_reg <= icmp_ln39_1_reg_1192_pp3_iter4_reg;
                icmp_ln39_1_reg_1192_pp3_iter6_reg <= icmp_ln39_1_reg_1192_pp3_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                add_ln39_2_reg_1221 <= add_ln39_2_fu_720_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                add_ln39_2_reg_1221_pp4_iter1_reg <= add_ln39_2_reg_1221;
                icmp_ln39_2_reg_1227 <= icmp_ln39_2_fu_726_p2;
                icmp_ln39_2_reg_1227_pp4_iter1_reg <= icmp_ln39_2_reg_1227;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp4_stage0_11001)) then
                add_ln39_2_reg_1221_pp4_iter2_reg <= add_ln39_2_reg_1221_pp4_iter1_reg;
                add_ln39_2_reg_1221_pp4_iter3_reg <= add_ln39_2_reg_1221_pp4_iter2_reg;
                add_ln39_2_reg_1221_pp4_iter4_reg <= add_ln39_2_reg_1221_pp4_iter3_reg;
                icmp_ln39_2_reg_1227_pp4_iter2_reg <= icmp_ln39_2_reg_1227_pp4_iter1_reg;
                icmp_ln39_2_reg_1227_pp4_iter3_reg <= icmp_ln39_2_reg_1227_pp4_iter2_reg;
                icmp_ln39_2_reg_1227_pp4_iter4_reg <= icmp_ln39_2_reg_1227_pp4_iter3_reg;
                icmp_ln39_2_reg_1227_pp4_iter5_reg <= icmp_ln39_2_reg_1227_pp4_iter4_reg;
                icmp_ln39_2_reg_1227_pp4_iter6_reg <= icmp_ln39_2_reg_1227_pp4_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                add_ln39_3_reg_1256 <= add_ln39_3_fu_751_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                add_ln39_3_reg_1256_pp5_iter1_reg <= add_ln39_3_reg_1256;
                icmp_ln39_3_reg_1262 <= icmp_ln39_3_fu_757_p2;
                icmp_ln39_3_reg_1262_pp5_iter1_reg <= icmp_ln39_3_reg_1262;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp5_stage0_11001)) then
                add_ln39_3_reg_1256_pp5_iter2_reg <= add_ln39_3_reg_1256_pp5_iter1_reg;
                add_ln39_3_reg_1256_pp5_iter3_reg <= add_ln39_3_reg_1256_pp5_iter2_reg;
                add_ln39_3_reg_1256_pp5_iter4_reg <= add_ln39_3_reg_1256_pp5_iter3_reg;
                icmp_ln39_3_reg_1262_pp5_iter2_reg <= icmp_ln39_3_reg_1262_pp5_iter1_reg;
                icmp_ln39_3_reg_1262_pp5_iter3_reg <= icmp_ln39_3_reg_1262_pp5_iter2_reg;
                icmp_ln39_3_reg_1262_pp5_iter4_reg <= icmp_ln39_3_reg_1262_pp5_iter3_reg;
                icmp_ln39_3_reg_1262_pp5_iter5_reg <= icmp_ln39_3_reg_1262_pp5_iter4_reg;
                icmp_ln39_3_reg_1262_pp5_iter6_reg <= icmp_ln39_3_reg_1262_pp5_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                add_ln39_reg_1151 <= add_ln39_fu_658_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                add_ln39_reg_1151_pp2_iter1_reg <= add_ln39_reg_1151;
                icmp_ln39_reg_1157 <= icmp_ln39_fu_664_p2;
                icmp_ln39_reg_1157_pp2_iter1_reg <= icmp_ln39_reg_1157;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                add_ln39_reg_1151_pp2_iter2_reg <= add_ln39_reg_1151_pp2_iter1_reg;
                add_ln39_reg_1151_pp2_iter3_reg <= add_ln39_reg_1151_pp2_iter2_reg;
                add_ln39_reg_1151_pp2_iter4_reg <= add_ln39_reg_1151_pp2_iter3_reg;
                icmp_ln39_reg_1157_pp2_iter2_reg <= icmp_ln39_reg_1157_pp2_iter1_reg;
                icmp_ln39_reg_1157_pp2_iter3_reg <= icmp_ln39_reg_1157_pp2_iter2_reg;
                icmp_ln39_reg_1157_pp2_iter4_reg <= icmp_ln39_reg_1157_pp2_iter3_reg;
                icmp_ln39_reg_1157_pp2_iter5_reg <= icmp_ln39_reg_1157_pp2_iter4_reg;
                icmp_ln39_reg_1157_pp2_iter6_reg <= icmp_ln39_reg_1157_pp2_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                and_ln83_2_reg_1303 <= and_ln83_2_fu_909_p2;
                max_val_3_reg_1309 <= max_val_3_fu_915_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                and_ln83_4_reg_1316 <= and_ln83_4_fu_999_p2;
                max_val_5_reg_1321 <= max_val_5_fu_1005_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                and_ln83_reg_1291 <= and_ln83_fu_818_p2;
                max_val_1_reg_1296 <= max_val_1_fu_824_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                icmp_ln83_10_reg_1327 <= icmp_ln83_10_fu_1047_p2;
                icmp_ln83_11_reg_1332 <= icmp_ln83_11_fu_1053_p2;
                icmp_ln83_12_reg_1337 <= icmp_ln83_12_fu_1059_p2;
                icmp_ln83_13_reg_1342 <= icmp_ln83_13_fu_1065_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln39_3_reg_1262_pp5_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)) or ((icmp_ln39_2_reg_1227_pp4_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((icmp_ln39_1_reg_1192_pp3_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((icmp_ln39_reg_1157_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then
                reg_620 <= grp_fu_597_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_enable_reg_pp4_iter1, ap_enable_reg_pp5_iter1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_enable_reg_pp2_iter0, icmp_ln39_fu_664_p2, ap_enable_reg_pp2_iter7, ap_enable_reg_pp3_iter0, icmp_ln39_1_fu_695_p2, ap_enable_reg_pp3_iter7, ap_enable_reg_pp4_iter0, icmp_ln39_2_fu_726_p2, ap_enable_reg_pp4_iter7, ap_enable_reg_pp5_iter0, icmp_ln39_3_fu_757_p2, ap_enable_reg_pp5_iter7, ap_CS_fsm_state12, grp_hw_act_layer2_fu_592_ap_done, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter6, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter6, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter6, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter6, grp_hwmm_layer1_fu_462_ap_done, grp_hwmm_layer2_fu_533_ap_done, grp_hw_act_layer1_fu_587_ap_done, exitcond259_fu_630_p2, exitcond248_fu_647_p2, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond259_fu_630_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((exitcond248_fu_647_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_hwmm_layer1_fu_462_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_hw_act_layer1_fu_587_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_hwmm_layer2_fu_533_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_hw_act_layer2_fu_592_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((icmp_ln39_fu_664_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((icmp_ln39_fu_664_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((icmp_ln39_1_fu_695_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((icmp_ln39_1_fu_695_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((icmp_ln39_2_fu_726_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) and not(((ap_enable_reg_pp4_iter6 = ap_const_logic_0) and (ap_enable_reg_pp4_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_enable_reg_pp4_iter6 = ap_const_logic_0) and (ap_enable_reg_pp4_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) or ((icmp_ln39_2_fu_726_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((icmp_ln39_3_fu_757_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) and not(((ap_enable_reg_pp5_iter6 = ap_const_logic_0) and (ap_enable_reg_pp5_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_enable_reg_pp5_iter6 = ap_const_logic_0) and (ap_enable_reg_pp5_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) or ((icmp_ln39_3_fu_757_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln39_1_fu_689_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_1_phi_fu_397_p4) + unsigned(ap_const_lv5_1));
    add_ln39_2_fu_720_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_2_phi_fu_420_p4) + unsigned(ap_const_lv5_1));
    add_ln39_3_fu_751_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_3_phi_fu_443_p4) + unsigned(ap_const_lv5_1));
    add_ln39_fu_658_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_phi_fu_374_p4) + unsigned(ap_const_lv5_1));
    and_ln83_1_fu_903_p2 <= (or_ln83_4_fu_897_p2 and or_ln83_3_fu_879_p2);
    and_ln83_2_fu_909_p2 <= (grp_fu_606_p2 and and_ln83_1_fu_903_p2);
    and_ln83_3_fu_993_p2 <= (or_ln83_6_fu_987_p2 and or_ln83_5_fu_969_p2);
    and_ln83_4_fu_999_p2 <= (grp_fu_606_p2 and and_ln83_3_fu_993_p2);
    and_ln83_5_fu_1098_p2 <= (or_ln83_8_fu_1094_p2 and or_ln83_7_fu_1090_p2);
    and_ln83_6_fu_1104_p2 <= (grp_fu_606_p2 and and_ln83_5_fu_1098_p2);
    and_ln83_fu_818_p2 <= (or_ln83_2_fu_812_p2 and grp_fu_606_p2);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(14);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(13);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(15);
    ap_CS_fsm_state39 <= ap_CS_fsm(17);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state48 <= ap_CS_fsm(19);
    ap_CS_fsm_state49 <= ap_CS_fsm(20);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(21);
    ap_CS_fsm_state51 <= ap_CS_fsm(22);
    ap_CS_fsm_state52 <= ap_CS_fsm(23);
    ap_CS_fsm_state53 <= ap_CS_fsm(24);
    ap_CS_fsm_state54 <= ap_CS_fsm(25);
    ap_CS_fsm_state55 <= ap_CS_fsm(26);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp3_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp3_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp3_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp3_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp4_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp4_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp4_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp4_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp4_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp5_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp5_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp5_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp5_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp5_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp2_exit_iter0_state13_assign_proc : process(icmp_ln39_fu_664_p2)
    begin
        if ((icmp_ln39_fu_664_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state22_assign_proc : process(icmp_ln39_1_fu_695_p2)
    begin
        if ((icmp_ln39_1_fu_695_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state22 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state31_assign_proc : process(icmp_ln39_2_fu_726_p2)
    begin
        if ((icmp_ln39_2_fu_726_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state31 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state40_assign_proc : process(icmp_ln39_3_fu_757_p2)
    begin
        if ((icmp_ln39_3_fu_757_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state40 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state40 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6)
    begin
        if (((ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter4, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter7, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter6)
    begin
        if (((ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter4, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter7, ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter3, ap_enable_reg_pp4_iter5, ap_enable_reg_pp4_iter6)
    begin
        if (((ap_enable_reg_pp4_iter6 = ap_const_logic_0) and (ap_enable_reg_pp4_iter5 = ap_const_logic_0) and (ap_enable_reg_pp4_iter3 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_enable_reg_pp4_iter7 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter4 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter4, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter7, ap_enable_reg_pp5_iter2, ap_enable_reg_pp5_iter3, ap_enable_reg_pp5_iter5, ap_enable_reg_pp5_iter6)
    begin
        if (((ap_enable_reg_pp5_iter6 = ap_const_logic_0) and (ap_enable_reg_pp5_iter5 = ap_const_logic_0) and (ap_enable_reg_pp5_iter3 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter7 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_enable_reg_pp5_iter4 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_k_1_phi_fu_397_p4_assign_proc : process(k_1_reg_393, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, icmp_ln39_1_reg_1192, add_ln39_1_reg_1186, ap_block_pp3_stage0)
    begin
        if (((icmp_ln39_1_reg_1192 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            ap_phi_mux_k_1_phi_fu_397_p4 <= add_ln39_1_reg_1186;
        else 
            ap_phi_mux_k_1_phi_fu_397_p4 <= k_1_reg_393;
        end if; 
    end process;


    ap_phi_mux_k_2_phi_fu_420_p4_assign_proc : process(k_2_reg_416, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, icmp_ln39_2_reg_1227, add_ln39_2_reg_1221, ap_block_pp4_stage0)
    begin
        if (((icmp_ln39_2_reg_1227 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            ap_phi_mux_k_2_phi_fu_420_p4 <= add_ln39_2_reg_1221;
        else 
            ap_phi_mux_k_2_phi_fu_420_p4 <= k_2_reg_416;
        end if; 
    end process;


    ap_phi_mux_k_3_phi_fu_443_p4_assign_proc : process(k_3_reg_439, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, icmp_ln39_3_reg_1262, add_ln39_3_reg_1256, ap_block_pp5_stage0)
    begin
        if (((icmp_ln39_3_reg_1262 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            ap_phi_mux_k_3_phi_fu_443_p4 <= add_ln39_3_reg_1256;
        else 
            ap_phi_mux_k_3_phi_fu_443_p4 <= k_3_reg_439;
        end if; 
    end process;


    ap_phi_mux_k_phi_fu_374_p4_assign_proc : process(k_reg_370, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln39_reg_1157, add_ln39_reg_1151, ap_block_pp2_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln39_reg_1157 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_k_phi_fu_374_p4 <= add_ln39_reg_1151;
        else 
            ap_phi_mux_k_phi_fu_374_p4 <= k_reg_370;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

        ap_return <= std_logic_vector(IEEE.numeric_std.resize(signed(max_idx_2_fu_1123_p3),32));


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln83_1_fu_832_p1 <= sum_2_reg_404;
    bitcast_ln83_2_fu_850_p1 <= max_val_1_reg_1296;
    bitcast_ln83_3_fu_922_p1 <= sum_4_reg_427;
    bitcast_ln83_4_fu_940_p1 <= max_val_3_reg_1309;
    bitcast_ln83_5_fu_1012_p1 <= sum_6_reg_450;
    bitcast_ln83_6_fu_1030_p1 <= max_val_5_reg_1321;
    bitcast_ln83_fu_782_p1 <= sum_reg_381;
    empty_13_fu_624_p2 <= std_logic_vector(unsigned(empty_12_reg_348) + unsigned(ap_const_lv6_1));
    empty_16_fu_641_p2 <= std_logic_vector(unsigned(empty_15_reg_359) + unsigned(ap_const_lv5_1));
    exitcond248_fu_647_p2 <= "1" when (empty_15_reg_359 = ap_const_lv5_18) else "0";
    exitcond259_fu_630_p2 <= "1" when (empty_12_reg_348 = ap_const_lv6_20) else "0";

    grp_fu_1347_ce_assign_proc : process(ap_CS_fsm_state12, grp_hw_act_layer1_fu_587_grp_fu_1347_p_ce, grp_hw_act_layer2_fu_592_grp_fu_1347_p_ce, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_1347_ce <= grp_hw_act_layer2_fu_592_grp_fu_1347_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_1347_ce <= grp_hw_act_layer1_fu_587_grp_fu_1347_p_ce;
        else 
            grp_fu_1347_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1347_opcode_assign_proc : process(ap_CS_fsm_state12, grp_hw_act_layer1_fu_587_grp_fu_1347_p_opcode, grp_hw_act_layer2_fu_592_grp_fu_1347_p_opcode, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_1347_opcode <= grp_hw_act_layer2_fu_592_grp_fu_1347_p_opcode;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_1347_opcode <= grp_hw_act_layer1_fu_587_grp_fu_1347_p_opcode;
        end if; 
    end process;


    grp_fu_1347_p0_assign_proc : process(ap_CS_fsm_state12, grp_hw_act_layer1_fu_587_grp_fu_1347_p_din0, grp_hw_act_layer2_fu_592_grp_fu_1347_p_din0, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_1347_p0 <= grp_hw_act_layer2_fu_592_grp_fu_1347_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_1347_p0 <= grp_hw_act_layer1_fu_587_grp_fu_1347_p_din0;
        end if; 
    end process;


    grp_fu_1347_p1_assign_proc : process(ap_CS_fsm_state12, grp_hw_act_layer1_fu_587_grp_fu_1347_p_din1, grp_hw_act_layer2_fu_592_grp_fu_1347_p_din1, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_1347_p1 <= grp_hw_act_layer2_fu_592_grp_fu_1347_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_1347_p1 <= grp_hw_act_layer1_fu_587_grp_fu_1347_p_din1;
        end if; 
    end process;


    grp_fu_597_ce_assign_proc : process(grp_hwmm_layer1_fu_462_grp_fu_597_p_ce, grp_hwmm_layer2_fu_533_grp_fu_597_p_ce, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_597_ce <= grp_hwmm_layer2_fu_533_grp_fu_597_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_597_ce <= grp_hwmm_layer1_fu_462_grp_fu_597_p_ce;
        else 
            grp_fu_597_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_597_p0_assign_proc : process(temp_output2_0_q0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, grp_hwmm_layer1_fu_462_grp_fu_597_p_din0, grp_hwmm_layer2_fu_533_grp_fu_597_p_din0, ap_block_pp2_stage0, ap_block_pp3_stage0, ap_block_pp4_stage0, ap_block_pp5_stage0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_597_p0 <= grp_hwmm_layer2_fu_533_grp_fu_597_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_597_p0 <= grp_hwmm_layer1_fu_462_grp_fu_597_p_din0;
        elsif ((((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)))) then 
            grp_fu_597_p0 <= temp_output2_0_q0;
        else 
            grp_fu_597_p0 <= temp_output2_0_q0;
        end if; 
    end process;


    grp_fu_597_p1_assign_proc : process(layer3_weights_0_q0, layer3_weights_1_q0, layer3_weights_2_q0, layer3_weights_3_q0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, grp_hwmm_layer1_fu_462_grp_fu_597_p_din1, grp_hwmm_layer2_fu_533_grp_fu_597_p_din1, ap_block_pp2_stage0, ap_block_pp3_stage0, ap_block_pp4_stage0, ap_block_pp5_stage0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_597_p1 <= grp_hwmm_layer2_fu_533_grp_fu_597_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_597_p1 <= grp_hwmm_layer1_fu_462_grp_fu_597_p_din1;
        elsif (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            grp_fu_597_p1 <= layer3_weights_3_q0;
        elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            grp_fu_597_p1 <= layer3_weights_2_q0;
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            grp_fu_597_p1 <= layer3_weights_1_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then 
            grp_fu_597_p1 <= layer3_weights_0_q0;
        else 
            grp_fu_597_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_606_ce_assign_proc : process(ap_CS_fsm_state12, grp_hw_act_layer1_fu_587_grp_fu_606_p_ce, grp_hw_act_layer2_fu_592_grp_fu_606_p_ce, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_606_ce <= grp_hw_act_layer2_fu_592_grp_fu_606_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_606_ce <= grp_hw_act_layer1_fu_587_grp_fu_606_p_ce;
        else 
            grp_fu_606_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_606_opcode_assign_proc : process(ap_CS_fsm_state54, ap_CS_fsm_state12, grp_hw_act_layer1_fu_587_grp_fu_606_p_opcode, grp_hw_act_layer2_fu_592_grp_fu_606_p_opcode, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_606_opcode <= grp_hw_act_layer2_fu_592_grp_fu_606_p_opcode;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_606_opcode <= grp_hw_act_layer1_fu_587_grp_fu_606_p_opcode;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            grp_fu_606_opcode <= ap_const_lv5_2;
        else 
            grp_fu_606_opcode <= ap_const_lv5_2;
        end if; 
    end process;


    grp_fu_606_p0_assign_proc : process(sum_reg_381, sum_2_reg_404, sum_4_reg_427, sum_6_reg_450, ap_CS_fsm_state54, ap_CS_fsm_state12, grp_hw_act_layer1_fu_587_grp_fu_606_p_din0, grp_hw_act_layer2_fu_592_grp_fu_606_p_din0, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_606_p0 <= grp_hw_act_layer2_fu_592_grp_fu_606_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_606_p0 <= grp_hw_act_layer1_fu_587_grp_fu_606_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_606_p0 <= sum_6_reg_450;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_606_p0 <= sum_4_reg_427;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_606_p0 <= sum_2_reg_404;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_606_p0 <= sum_reg_381;
        else 
            grp_fu_606_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_606_p1_assign_proc : process(max_val_1_reg_1296, max_val_3_reg_1309, max_val_5_reg_1321, ap_CS_fsm_state54, ap_CS_fsm_state12, grp_hw_act_layer1_fu_587_grp_fu_606_p_din1, grp_hw_act_layer2_fu_592_grp_fu_606_p_din1, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_606_p1 <= grp_hw_act_layer2_fu_592_grp_fu_606_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_606_p1 <= grp_hw_act_layer1_fu_587_grp_fu_606_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_606_p1 <= max_val_5_reg_1321;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_606_p1 <= max_val_3_reg_1309;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_606_p1 <= max_val_1_reg_1296;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_606_p1 <= ap_const_lv32_C479F99A;
        else 
            grp_fu_606_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_681_in_valid_assign_proc : process(icmp_ln39_reg_1157_pp2_iter4_reg, ap_enable_reg_pp2_iter5, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (icmp_ln39_reg_1157_pp2_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_fu_681_in_valid <= ap_const_logic_1;
        else 
            grp_fu_681_in_valid <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_681_p2 <= "1" when (add_ln39_reg_1151_pp2_iter4_reg = ap_const_lv5_18) else "0";

    grp_fu_712_in_valid_assign_proc : process(icmp_ln39_1_reg_1192_pp3_iter4_reg, ap_enable_reg_pp3_iter5, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter5 = ap_const_logic_1) and (icmp_ln39_1_reg_1192_pp3_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            grp_fu_712_in_valid <= ap_const_logic_1;
        else 
            grp_fu_712_in_valid <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_712_p2 <= "1" when (add_ln39_1_reg_1186_pp3_iter4_reg = ap_const_lv5_18) else "0";

    grp_fu_743_in_valid_assign_proc : process(icmp_ln39_2_reg_1227_pp4_iter4_reg, ap_enable_reg_pp4_iter5, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter5 = ap_const_logic_1) and (icmp_ln39_2_reg_1227_pp4_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            grp_fu_743_in_valid <= ap_const_logic_1;
        else 
            grp_fu_743_in_valid <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_743_p2 <= "1" when (add_ln39_2_reg_1221_pp4_iter4_reg = ap_const_lv5_18) else "0";

    grp_fu_774_in_valid_assign_proc : process(icmp_ln39_3_reg_1262_pp5_iter4_reg, ap_enable_reg_pp5_iter5, ap_block_pp5_stage0)
    begin
        if (((ap_enable_reg_pp5_iter5 = ap_const_logic_1) and (icmp_ln39_3_reg_1262_pp5_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            grp_fu_774_in_valid <= ap_const_logic_1;
        else 
            grp_fu_774_in_valid <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_774_p2 <= "1" when (add_ln39_3_reg_1256_pp5_iter4_reg = ap_const_lv5_18) else "0";
    grp_hw_act_layer1_fu_587_ap_start <= grp_hw_act_layer1_fu_587_ap_start_reg;
    grp_hw_act_layer1_fu_587_grp_fu_1347_p_dout0 <= grp_fu_1347_p2;
    grp_hw_act_layer1_fu_587_grp_fu_606_p_dout0 <= grp_fu_606_p2;
    grp_hw_act_layer2_fu_592_ap_start <= grp_hw_act_layer2_fu_592_ap_start_reg;
    grp_hw_act_layer2_fu_592_grp_fu_1347_p_dout0 <= grp_fu_1347_p2;
    grp_hw_act_layer2_fu_592_grp_fu_606_p_dout0 <= grp_fu_606_p2;
    grp_hwmm_layer1_fu_462_ap_start <= grp_hwmm_layer1_fu_462_ap_start_reg;
    grp_hwmm_layer1_fu_462_grp_fu_597_p_dout0 <= grp_fu_597_p2;
    grp_hwmm_layer2_fu_533_ap_start <= grp_hwmm_layer2_fu_533_ap_start_reg;
    grp_hwmm_layer2_fu_533_grp_fu_597_p_dout0 <= grp_fu_597_p2;
    icmp_ln39_1_fu_695_p2 <= "1" when (ap_phi_mux_k_1_phi_fu_397_p4 = ap_const_lv5_18) else "0";
    icmp_ln39_2_fu_726_p2 <= "1" when (ap_phi_mux_k_2_phi_fu_420_p4 = ap_const_lv5_18) else "0";
    icmp_ln39_3_fu_757_p2 <= "1" when (ap_phi_mux_k_3_phi_fu_443_p4 = ap_const_lv5_18) else "0";
    icmp_ln39_fu_664_p2 <= "1" when (ap_phi_mux_k_phi_fu_374_p4 = ap_const_lv5_18) else "0";
    icmp_ln83_10_fu_1047_p2 <= "0" when (tmp_8_fu_1016_p4 = ap_const_lv8_FF) else "1";
    icmp_ln83_11_fu_1053_p2 <= "1" when (trunc_ln83_5_fu_1026_p1 = ap_const_lv23_0) else "0";
    icmp_ln83_12_fu_1059_p2 <= "0" when (tmp_9_fu_1033_p4 = ap_const_lv8_FF) else "1";
    icmp_ln83_13_fu_1065_p2 <= "1" when (trunc_ln83_6_fu_1043_p1 = ap_const_lv23_0) else "0";
    icmp_ln83_1_fu_806_p2 <= "1" when (trunc_ln83_fu_796_p1 = ap_const_lv23_0) else "0";
    icmp_ln83_2_fu_867_p2 <= "0" when (tmp_2_fu_836_p4 = ap_const_lv8_FF) else "1";
    icmp_ln83_3_fu_873_p2 <= "1" when (trunc_ln83_1_fu_846_p1 = ap_const_lv23_0) else "0";
    icmp_ln83_4_fu_885_p2 <= "0" when (tmp_3_fu_853_p4 = ap_const_lv8_FF) else "1";
    icmp_ln83_5_fu_891_p2 <= "1" when (trunc_ln83_2_fu_863_p1 = ap_const_lv23_0) else "0";
    icmp_ln83_6_fu_957_p2 <= "0" when (tmp_5_fu_926_p4 = ap_const_lv8_FF) else "1";
    icmp_ln83_7_fu_963_p2 <= "1" when (trunc_ln83_3_fu_936_p1 = ap_const_lv23_0) else "0";
    icmp_ln83_8_fu_975_p2 <= "0" when (tmp_6_fu_943_p4 = ap_const_lv8_FF) else "1";
    icmp_ln83_9_fu_981_p2 <= "1" when (trunc_ln83_4_fu_953_p1 = ap_const_lv23_0) else "0";
    icmp_ln83_fu_800_p2 <= "0" when (tmp_fu_786_p4 = ap_const_lv8_FF) else "1";
    k_1_cast_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_k_1_phi_fu_397_p4),64));
    k_2_cast_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_k_2_phi_fu_420_p4),64));
    k_3_cast_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_k_3_phi_fu_443_p4),64));
    k_cast_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_k_phi_fu_374_p4),64));
    layer3_weights_0_address0 <= k_cast_fu_670_p1(5 - 1 downto 0);

    layer3_weights_0_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            layer3_weights_0_ce0 <= ap_const_logic_1;
        else 
            layer3_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer3_weights_1_address0 <= k_1_cast_fu_701_p1(5 - 1 downto 0);

    layer3_weights_1_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            layer3_weights_1_ce0 <= ap_const_logic_1;
        else 
            layer3_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer3_weights_2_address0 <= k_2_cast_fu_732_p1(5 - 1 downto 0);

    layer3_weights_2_ce0_assign_proc : process(ap_block_pp4_stage0_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
            layer3_weights_2_ce0 <= ap_const_logic_1;
        else 
            layer3_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer3_weights_3_address0 <= k_3_cast_fu_763_p1(5 - 1 downto 0);

    layer3_weights_3_ce0_assign_proc : process(ap_block_pp5_stage0_11001, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
            layer3_weights_3_ce0 <= ap_const_logic_1;
        else 
            layer3_weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_idx_2_fu_1123_p3 <= 
        select_ln83_fu_1110_p3 when (or_ln83_1_fu_1118_p2(0) = '1') else 
        sext_ln83_fu_1086_p1;
    max_idx_fu_1078_p3 <= 
        zext_ln83_fu_1071_p1 when (or_ln83_fu_1074_p2(0) = '1') else 
        ap_const_lv2_3;
    max_val_1_fu_824_p3 <= 
        sum_reg_381 when (and_ln83_fu_818_p2(0) = '1') else 
        ap_const_lv32_C479F99A;
    max_val_3_fu_915_p3 <= 
        sum_2_reg_404 when (and_ln83_2_fu_909_p2(0) = '1') else 
        max_val_1_reg_1296;
    max_val_5_fu_1005_p3 <= 
        sum_4_reg_427 when (and_ln83_4_fu_999_p2(0) = '1') else 
        max_val_3_reg_1309;
    or_ln83_1_fu_1118_p2 <= (and_ln83_6_fu_1104_p2 or and_ln83_4_reg_1316);
    or_ln83_2_fu_812_p2 <= (icmp_ln83_fu_800_p2 or icmp_ln83_1_fu_806_p2);
    or_ln83_3_fu_879_p2 <= (icmp_ln83_3_fu_873_p2 or icmp_ln83_2_fu_867_p2);
    or_ln83_4_fu_897_p2 <= (icmp_ln83_5_fu_891_p2 or icmp_ln83_4_fu_885_p2);
    or_ln83_5_fu_969_p2 <= (icmp_ln83_7_fu_963_p2 or icmp_ln83_6_fu_957_p2);
    or_ln83_6_fu_987_p2 <= (icmp_ln83_9_fu_981_p2 or icmp_ln83_8_fu_975_p2);
    or_ln83_7_fu_1090_p2 <= (icmp_ln83_11_reg_1332 or icmp_ln83_10_reg_1327);
    or_ln83_8_fu_1094_p2 <= (icmp_ln83_13_reg_1342 or icmp_ln83_12_reg_1337);
    or_ln83_fu_1074_p2 <= (and_ln83_reg_1291 or and_ln83_2_reg_1303);
    p_cast1_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_15_reg_359),64));
    p_cast_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_12_reg_348),64));
    select_ln83_fu_1110_p3 <= 
        ap_const_lv3_3 when (and_ln83_6_fu_1104_p2(0) = '1') else 
        ap_const_lv3_2;
        sext_ln83_fu_1086_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(max_idx_fu_1078_p3),3));


    temp_output2_0_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp5_stage0, ap_CS_fsm_state4, ap_enable_reg_pp2_iter0, ap_enable_reg_pp3_iter0, ap_enable_reg_pp4_iter0, ap_enable_reg_pp5_iter0, ap_CS_fsm_state12, grp_hwmm_layer2_fu_533_output_0_address0, grp_hw_act_layer2_fu_592_output_0_address0, ap_block_pp2_stage0, ap_block_pp3_stage0, ap_block_pp4_stage0, ap_block_pp5_stage0, ap_CS_fsm_state10, ap_CS_fsm_state8, p_cast1_fu_653_p1, k_cast_fu_670_p1, k_1_cast_fu_701_p1, k_2_cast_fu_732_p1, k_3_cast_fu_763_p1)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            temp_output2_0_address0 <= k_3_cast_fu_763_p1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            temp_output2_0_address0 <= k_2_cast_fu_732_p1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            temp_output2_0_address0 <= k_1_cast_fu_701_p1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            temp_output2_0_address0 <= k_cast_fu_670_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_output2_0_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp_output2_0_address0 <= p_cast1_fu_653_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_output2_0_address0 <= grp_hw_act_layer2_fu_592_output_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_output2_0_address0 <= grp_hwmm_layer2_fu_533_output_0_address0;
        else 
            temp_output2_0_address0 <= "XXXXX";
        end if; 
    end process;


    temp_output2_0_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001, ap_block_pp5_stage0_11001, ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp5_stage0, ap_CS_fsm_state4, ap_enable_reg_pp2_iter0, ap_enable_reg_pp3_iter0, ap_enable_reg_pp4_iter0, ap_enable_reg_pp5_iter0, ap_CS_fsm_state12, grp_hwmm_layer2_fu_533_output_0_ce0, grp_hw_act_layer1_fu_587_ap_done, grp_hw_act_layer2_fu_592_output_0_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((grp_hw_act_layer1_fu_587_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            temp_output2_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_output2_0_ce0 <= grp_hw_act_layer2_fu_592_output_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_output2_0_ce0 <= grp_hwmm_layer2_fu_533_output_0_ce0;
        else 
            temp_output2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output2_0_ce1_assign_proc : process(ap_CS_fsm_state12, grp_hw_act_layer2_fu_592_output_0_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_output2_0_ce1 <= grp_hw_act_layer2_fu_592_output_0_ce1;
        else 
            temp_output2_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output2_0_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state12, grp_hwmm_layer2_fu_533_output_0_d0, grp_hw_act_layer2_fu_592_output_0_d0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_output2_0_d0 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp_output2_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_output2_0_d0 <= grp_hw_act_layer2_fu_592_output_0_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_output2_0_d0 <= grp_hwmm_layer2_fu_533_output_0_d0;
        else 
            temp_output2_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_output2_0_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state12, grp_hwmm_layer2_fu_533_output_0_we0, grp_hw_act_layer1_fu_587_ap_done, grp_hw_act_layer2_fu_592_output_0_we0, exitcond248_fu_647_p2, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((((exitcond248_fu_647_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((grp_hw_act_layer1_fu_587_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            temp_output2_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_output2_0_we0 <= grp_hw_act_layer2_fu_592_output_0_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_output2_0_we0 <= grp_hwmm_layer2_fu_533_output_0_we0;
        else 
            temp_output2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output2_0_we1_assign_proc : process(ap_CS_fsm_state12, grp_hw_act_layer2_fu_592_output_0_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_output2_0_we1 <= grp_hw_act_layer2_fu_592_output_0_we1;
        else 
            temp_output2_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output_0_address0_assign_proc : process(ap_CS_fsm_state2, grp_hwmm_layer1_fu_462_output_0_address0, grp_hwmm_layer2_fu_533_input_0_address0, grp_hw_act_layer1_fu_587_output_0_address0, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state8, p_cast_fu_636_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            temp_output_0_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            temp_output_0_address0 <= p_cast_fu_636_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_output_0_address0 <= grp_hw_act_layer1_fu_587_output_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_output_0_address0 <= grp_hwmm_layer2_fu_533_input_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_output_0_address0 <= grp_hwmm_layer1_fu_462_output_0_address0;
        else 
            temp_output_0_address0 <= "XXXXX";
        end if; 
    end process;


    temp_output_0_ce0_assign_proc : process(ap_CS_fsm_state2, grp_hwmm_layer1_fu_462_output_0_ce0, grp_hwmm_layer2_fu_533_input_0_ce0, grp_hw_act_layer1_fu_587_output_0_ce0, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            temp_output_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_output_0_ce0 <= grp_hw_act_layer1_fu_587_output_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_output_0_ce0 <= grp_hwmm_layer2_fu_533_input_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_output_0_ce0 <= grp_hwmm_layer1_fu_462_output_0_ce0;
        else 
            temp_output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output_0_ce1_assign_proc : process(grp_hw_act_layer1_fu_587_output_0_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_output_0_ce1 <= grp_hw_act_layer1_fu_587_output_0_ce1;
        else 
            temp_output_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output_0_d0_assign_proc : process(ap_CS_fsm_state2, grp_hwmm_layer1_fu_462_output_0_d0, grp_hw_act_layer1_fu_587_output_0_d0, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            temp_output_0_d0 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            temp_output_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_output_0_d0 <= grp_hw_act_layer1_fu_587_output_0_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_output_0_d0 <= grp_hwmm_layer1_fu_462_output_0_d0;
        else 
            temp_output_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_output_0_we0_assign_proc : process(ap_CS_fsm_state2, grp_hwmm_layer1_fu_462_output_0_we0, grp_hw_act_layer1_fu_587_output_0_we0, exitcond259_fu_630_p2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((exitcond259_fu_630_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            temp_output_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_output_0_we0 <= grp_hw_act_layer1_fu_587_output_0_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_output_0_we0 <= grp_hwmm_layer1_fu_462_output_0_we0;
        else 
            temp_output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output_0_we1_assign_proc : process(grp_hw_act_layer1_fu_587_output_0_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_output_0_we1 <= grp_hw_act_layer1_fu_587_output_0_we1;
        else 
            temp_output_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_836_p4 <= bitcast_ln83_1_fu_832_p1(30 downto 23);
    tmp_3_fu_853_p4 <= bitcast_ln83_2_fu_850_p1(30 downto 23);
    tmp_5_fu_926_p4 <= bitcast_ln83_3_fu_922_p1(30 downto 23);
    tmp_6_fu_943_p4 <= bitcast_ln83_4_fu_940_p1(30 downto 23);
    tmp_8_fu_1016_p4 <= bitcast_ln83_5_fu_1012_p1(30 downto 23);
    tmp_9_fu_1033_p4 <= bitcast_ln83_6_fu_1030_p1(30 downto 23);
    tmp_fu_786_p4 <= bitcast_ln83_fu_782_p1(30 downto 23);
    trunc_ln83_1_fu_846_p1 <= bitcast_ln83_1_fu_832_p1(23 - 1 downto 0);
    trunc_ln83_2_fu_863_p1 <= bitcast_ln83_2_fu_850_p1(23 - 1 downto 0);
    trunc_ln83_3_fu_936_p1 <= bitcast_ln83_3_fu_922_p1(23 - 1 downto 0);
    trunc_ln83_4_fu_953_p1 <= bitcast_ln83_4_fu_940_p1(23 - 1 downto 0);
    trunc_ln83_5_fu_1026_p1 <= bitcast_ln83_5_fu_1012_p1(23 - 1 downto 0);
    trunc_ln83_6_fu_1043_p1 <= bitcast_ln83_6_fu_1030_p1(23 - 1 downto 0);
    trunc_ln83_fu_796_p1 <= bitcast_ln83_fu_782_p1(23 - 1 downto 0);
    zext_ln83_fu_1071_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln83_2_reg_1303),2));
end behav;
