// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nn_inference_hw_act_layer2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_0_address0,
        output_0_ce0,
        output_0_we0,
        output_0_d0,
        output_0_q0,
        output_0_address1,
        output_0_ce1,
        output_0_we1,
        output_0_d1,
        output_0_q1,
        grp_fu_606_p_din0,
        grp_fu_606_p_din1,
        grp_fu_606_p_opcode,
        grp_fu_606_p_dout0,
        grp_fu_606_p_ce,
        grp_fu_1347_p_din0,
        grp_fu_1347_p_din1,
        grp_fu_1347_p_opcode,
        grp_fu_1347_p_dout0,
        grp_fu_1347_p_ce
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] output_0_address0;
output   output_0_ce0;
output   output_0_we0;
output  [31:0] output_0_d0;
input  [31:0] output_0_q0;
output  [4:0] output_0_address1;
output   output_0_ce1;
output   output_0_we1;
output  [31:0] output_0_d1;
input  [31:0] output_0_q1;
output  [31:0] grp_fu_606_p_din0;
output  [31:0] grp_fu_606_p_din1;
output  [4:0] grp_fu_606_p_opcode;
input  [0:0] grp_fu_606_p_dout0;
output   grp_fu_606_p_ce;
output  [31:0] grp_fu_1347_p_din0;
output  [31:0] grp_fu_1347_p_din1;
output  [4:0] grp_fu_1347_p_opcode;
input  [0:0] grp_fu_1347_p_dout0;
output   grp_fu_1347_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] output_0_address0;
reg output_0_ce0;
reg output_0_we0;
reg[31:0] output_0_d0;
reg[4:0] output_0_address1;
reg output_0_ce1;
reg output_0_we1;
reg[31:0] output_0_d1;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_297;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state13;
reg   [31:0] reg_302;
wire   [4:0] output_0_addr_reg_1491;
wire   [4:0] output_0_addr_1_reg_1496;
wire   [4:0] output_0_addr_2_reg_1501;
wire   [4:0] output_0_addr_3_reg_1506;
reg   [31:0] output_0_load_2_reg_1511;
wire    ap_CS_fsm_state3;
reg   [31:0] output_0_load_3_reg_1518;
wire   [4:0] output_0_addr_4_reg_1525;
wire   [4:0] output_0_addr_5_reg_1530;
reg   [31:0] output_0_load_4_reg_1535;
wire    ap_CS_fsm_state4;
reg   [31:0] output_0_load_5_reg_1542;
wire   [4:0] output_0_addr_6_reg_1549;
wire   [4:0] output_0_addr_7_reg_1554;
reg   [31:0] output_0_load_6_reg_1559;
wire    ap_CS_fsm_state5;
reg   [31:0] output_0_load_7_reg_1566;
wire   [4:0] output_0_addr_8_reg_1573;
wire   [4:0] output_0_addr_9_reg_1578;
reg   [31:0] output_0_load_8_reg_1583;
wire    ap_CS_fsm_state6;
reg   [31:0] output_0_load_9_reg_1590;
wire   [4:0] output_0_addr_10_reg_1597;
wire   [4:0] output_0_addr_11_reg_1602;
reg   [31:0] output_0_load_10_reg_1607;
wire    ap_CS_fsm_state7;
reg   [31:0] output_0_load_11_reg_1614;
wire   [4:0] output_0_addr_12_reg_1621;
wire   [4:0] output_0_addr_13_reg_1626;
reg   [31:0] output_0_load_12_reg_1631;
wire    ap_CS_fsm_state8;
reg   [31:0] output_0_load_13_reg_1638;
wire   [4:0] output_0_addr_14_reg_1645;
wire   [4:0] output_0_addr_15_reg_1650;
reg   [31:0] output_0_load_14_reg_1655;
wire    ap_CS_fsm_state9;
reg   [31:0] output_0_load_15_reg_1662;
wire   [4:0] output_0_addr_16_reg_1669;
wire   [4:0] output_0_addr_17_reg_1674;
reg   [31:0] output_0_load_16_reg_1679;
wire    ap_CS_fsm_state10;
reg   [31:0] output_0_load_17_reg_1686;
wire   [4:0] output_0_addr_18_reg_1693;
wire   [4:0] output_0_addr_19_reg_1698;
reg   [31:0] output_0_load_18_reg_1703;
wire    ap_CS_fsm_state11;
reg   [31:0] output_0_load_19_reg_1710;
wire   [4:0] output_0_addr_20_reg_1717;
wire   [4:0] output_0_addr_21_reg_1722;
reg   [31:0] output_0_load_20_reg_1727;
wire    ap_CS_fsm_state12;
reg   [31:0] output_0_load_21_reg_1734;
wire   [4:0] output_0_addr_22_reg_1741;
wire   [4:0] output_0_addr_23_reg_1746;
wire   [31:0] select_ln67_fu_349_p3;
wire   [31:0] select_ln67_1_fu_400_p3;
wire    ap_CS_fsm_state14;
wire   [31:0] select_ln67_2_fu_450_p3;
wire   [31:0] select_ln67_3_fu_499_p3;
wire    ap_CS_fsm_state15;
wire   [31:0] select_ln67_4_fu_548_p3;
wire   [31:0] select_ln67_5_fu_597_p3;
wire    ap_CS_fsm_state16;
wire   [31:0] select_ln67_6_fu_646_p3;
wire   [31:0] select_ln67_7_fu_695_p3;
wire    ap_CS_fsm_state17;
wire   [31:0] select_ln67_8_fu_744_p3;
wire   [31:0] select_ln67_9_fu_793_p3;
wire    ap_CS_fsm_state18;
wire   [31:0] select_ln67_10_fu_842_p3;
wire   [31:0] select_ln67_11_fu_891_p3;
wire    ap_CS_fsm_state19;
wire   [31:0] select_ln67_12_fu_940_p3;
wire   [31:0] select_ln67_13_fu_989_p3;
wire    ap_CS_fsm_state20;
wire   [31:0] select_ln67_14_fu_1038_p3;
wire   [31:0] select_ln67_15_fu_1087_p3;
wire    ap_CS_fsm_state21;
wire   [31:0] select_ln67_16_fu_1136_p3;
wire   [31:0] select_ln67_17_fu_1185_p3;
wire    ap_CS_fsm_state22;
wire   [31:0] select_ln67_18_fu_1234_p3;
wire   [31:0] select_ln67_19_fu_1283_p3;
wire    ap_CS_fsm_state23;
wire   [31:0] select_ln67_20_fu_1332_p3;
wire   [31:0] select_ln67_21_fu_1381_p3;
wire    ap_CS_fsm_state24;
wire   [31:0] select_ln67_22_fu_1431_p3;
wire   [31:0] select_ln67_23_fu_1482_p3;
reg   [31:0] grp_fu_287_p0;
wire   [31:0] grp_fu_287_p1;
reg   [31:0] grp_fu_292_p0;
wire   [31:0] grp_fu_292_p1;
wire   [31:0] bitcast_ln67_fu_307_p1;
wire   [7:0] tmp_fu_311_p4;
wire   [22:0] trunc_ln67_fu_321_p1;
wire   [0:0] icmp_ln67_1_fu_331_p2;
wire   [0:0] icmp_ln67_fu_325_p2;
wire   [0:0] or_ln67_fu_337_p2;
wire   [0:0] grp_fu_287_p2;
wire   [0:0] and_ln67_fu_343_p2;
wire   [31:0] bitcast_ln67_1_fu_358_p1;
wire   [7:0] tmp_1_fu_362_p4;
wire   [22:0] trunc_ln67_1_fu_372_p1;
wire   [0:0] icmp_ln67_3_fu_382_p2;
wire   [0:0] icmp_ln67_2_fu_376_p2;
wire   [0:0] or_ln67_1_fu_388_p2;
wire   [0:0] grp_fu_292_p2;
wire   [0:0] and_ln67_1_fu_394_p2;
wire   [31:0] bitcast_ln67_2_fu_409_p1;
wire   [7:0] tmp_3_fu_412_p4;
wire   [22:0] trunc_ln67_2_fu_422_p1;
wire   [0:0] icmp_ln67_5_fu_432_p2;
wire   [0:0] icmp_ln67_4_fu_426_p2;
wire   [0:0] or_ln67_2_fu_438_p2;
wire   [0:0] and_ln67_2_fu_444_p2;
wire   [31:0] bitcast_ln67_3_fu_458_p1;
wire   [7:0] tmp_5_fu_461_p4;
wire   [22:0] trunc_ln67_3_fu_471_p1;
wire   [0:0] icmp_ln67_7_fu_481_p2;
wire   [0:0] icmp_ln67_6_fu_475_p2;
wire   [0:0] or_ln67_3_fu_487_p2;
wire   [0:0] and_ln67_3_fu_493_p2;
wire   [31:0] bitcast_ln67_4_fu_507_p1;
wire   [7:0] tmp_7_fu_510_p4;
wire   [22:0] trunc_ln67_4_fu_520_p1;
wire   [0:0] icmp_ln67_9_fu_530_p2;
wire   [0:0] icmp_ln67_8_fu_524_p2;
wire   [0:0] or_ln67_4_fu_536_p2;
wire   [0:0] and_ln67_4_fu_542_p2;
wire   [31:0] bitcast_ln67_5_fu_556_p1;
wire   [7:0] tmp_9_fu_559_p4;
wire   [22:0] trunc_ln67_5_fu_569_p1;
wire   [0:0] icmp_ln67_11_fu_579_p2;
wire   [0:0] icmp_ln67_10_fu_573_p2;
wire   [0:0] or_ln67_5_fu_585_p2;
wire   [0:0] and_ln67_5_fu_591_p2;
wire   [31:0] bitcast_ln67_6_fu_605_p1;
wire   [7:0] tmp_11_fu_608_p4;
wire   [22:0] trunc_ln67_6_fu_618_p1;
wire   [0:0] icmp_ln67_13_fu_628_p2;
wire   [0:0] icmp_ln67_12_fu_622_p2;
wire   [0:0] or_ln67_6_fu_634_p2;
wire   [0:0] and_ln67_6_fu_640_p2;
wire   [31:0] bitcast_ln67_7_fu_654_p1;
wire   [7:0] tmp_13_fu_657_p4;
wire   [22:0] trunc_ln67_7_fu_667_p1;
wire   [0:0] icmp_ln67_15_fu_677_p2;
wire   [0:0] icmp_ln67_14_fu_671_p2;
wire   [0:0] or_ln67_7_fu_683_p2;
wire   [0:0] and_ln67_7_fu_689_p2;
wire   [31:0] bitcast_ln67_8_fu_703_p1;
wire   [7:0] tmp_15_fu_706_p4;
wire   [22:0] trunc_ln67_8_fu_716_p1;
wire   [0:0] icmp_ln67_17_fu_726_p2;
wire   [0:0] icmp_ln67_16_fu_720_p2;
wire   [0:0] or_ln67_8_fu_732_p2;
wire   [0:0] and_ln67_8_fu_738_p2;
wire   [31:0] bitcast_ln67_9_fu_752_p1;
wire   [7:0] tmp_17_fu_755_p4;
wire   [22:0] trunc_ln67_9_fu_765_p1;
wire   [0:0] icmp_ln67_19_fu_775_p2;
wire   [0:0] icmp_ln67_18_fu_769_p2;
wire   [0:0] or_ln67_9_fu_781_p2;
wire   [0:0] and_ln67_9_fu_787_p2;
wire   [31:0] bitcast_ln67_10_fu_801_p1;
wire   [7:0] tmp_19_fu_804_p4;
wire   [22:0] trunc_ln67_10_fu_814_p1;
wire   [0:0] icmp_ln67_21_fu_824_p2;
wire   [0:0] icmp_ln67_20_fu_818_p2;
wire   [0:0] or_ln67_10_fu_830_p2;
wire   [0:0] and_ln67_10_fu_836_p2;
wire   [31:0] bitcast_ln67_11_fu_850_p1;
wire   [7:0] tmp_21_fu_853_p4;
wire   [22:0] trunc_ln67_11_fu_863_p1;
wire   [0:0] icmp_ln67_23_fu_873_p2;
wire   [0:0] icmp_ln67_22_fu_867_p2;
wire   [0:0] or_ln67_11_fu_879_p2;
wire   [0:0] and_ln67_11_fu_885_p2;
wire   [31:0] bitcast_ln67_12_fu_899_p1;
wire   [7:0] tmp_23_fu_902_p4;
wire   [22:0] trunc_ln67_12_fu_912_p1;
wire   [0:0] icmp_ln67_25_fu_922_p2;
wire   [0:0] icmp_ln67_24_fu_916_p2;
wire   [0:0] or_ln67_12_fu_928_p2;
wire   [0:0] and_ln67_12_fu_934_p2;
wire   [31:0] bitcast_ln67_13_fu_948_p1;
wire   [7:0] tmp_25_fu_951_p4;
wire   [22:0] trunc_ln67_13_fu_961_p1;
wire   [0:0] icmp_ln67_27_fu_971_p2;
wire   [0:0] icmp_ln67_26_fu_965_p2;
wire   [0:0] or_ln67_13_fu_977_p2;
wire   [0:0] and_ln67_13_fu_983_p2;
wire   [31:0] bitcast_ln67_14_fu_997_p1;
wire   [7:0] tmp_27_fu_1000_p4;
wire   [22:0] trunc_ln67_14_fu_1010_p1;
wire   [0:0] icmp_ln67_29_fu_1020_p2;
wire   [0:0] icmp_ln67_28_fu_1014_p2;
wire   [0:0] or_ln67_14_fu_1026_p2;
wire   [0:0] and_ln67_14_fu_1032_p2;
wire   [31:0] bitcast_ln67_15_fu_1046_p1;
wire   [7:0] tmp_29_fu_1049_p4;
wire   [22:0] trunc_ln67_15_fu_1059_p1;
wire   [0:0] icmp_ln67_31_fu_1069_p2;
wire   [0:0] icmp_ln67_30_fu_1063_p2;
wire   [0:0] or_ln67_15_fu_1075_p2;
wire   [0:0] and_ln67_15_fu_1081_p2;
wire   [31:0] bitcast_ln67_16_fu_1095_p1;
wire   [7:0] tmp_31_fu_1098_p4;
wire   [22:0] trunc_ln67_16_fu_1108_p1;
wire   [0:0] icmp_ln67_33_fu_1118_p2;
wire   [0:0] icmp_ln67_32_fu_1112_p2;
wire   [0:0] or_ln67_16_fu_1124_p2;
wire   [0:0] and_ln67_16_fu_1130_p2;
wire   [31:0] bitcast_ln67_17_fu_1144_p1;
wire   [7:0] tmp_33_fu_1147_p4;
wire   [22:0] trunc_ln67_17_fu_1157_p1;
wire   [0:0] icmp_ln67_35_fu_1167_p2;
wire   [0:0] icmp_ln67_34_fu_1161_p2;
wire   [0:0] or_ln67_17_fu_1173_p2;
wire   [0:0] and_ln67_17_fu_1179_p2;
wire   [31:0] bitcast_ln67_18_fu_1193_p1;
wire   [7:0] tmp_35_fu_1196_p4;
wire   [22:0] trunc_ln67_18_fu_1206_p1;
wire   [0:0] icmp_ln67_37_fu_1216_p2;
wire   [0:0] icmp_ln67_36_fu_1210_p2;
wire   [0:0] or_ln67_18_fu_1222_p2;
wire   [0:0] and_ln67_18_fu_1228_p2;
wire   [31:0] bitcast_ln67_19_fu_1242_p1;
wire   [7:0] tmp_37_fu_1245_p4;
wire   [22:0] trunc_ln67_19_fu_1255_p1;
wire   [0:0] icmp_ln67_39_fu_1265_p2;
wire   [0:0] icmp_ln67_38_fu_1259_p2;
wire   [0:0] or_ln67_19_fu_1271_p2;
wire   [0:0] and_ln67_19_fu_1277_p2;
wire   [31:0] bitcast_ln67_20_fu_1291_p1;
wire   [7:0] tmp_39_fu_1294_p4;
wire   [22:0] trunc_ln67_20_fu_1304_p1;
wire   [0:0] icmp_ln67_41_fu_1314_p2;
wire   [0:0] icmp_ln67_40_fu_1308_p2;
wire   [0:0] or_ln67_20_fu_1320_p2;
wire   [0:0] and_ln67_20_fu_1326_p2;
wire   [31:0] bitcast_ln67_21_fu_1340_p1;
wire   [7:0] tmp_41_fu_1343_p4;
wire   [22:0] trunc_ln67_21_fu_1353_p1;
wire   [0:0] icmp_ln67_43_fu_1363_p2;
wire   [0:0] icmp_ln67_42_fu_1357_p2;
wire   [0:0] or_ln67_21_fu_1369_p2;
wire   [0:0] and_ln67_21_fu_1375_p2;
wire   [31:0] bitcast_ln67_22_fu_1389_p1;
wire   [7:0] tmp_43_fu_1393_p4;
wire   [22:0] trunc_ln67_22_fu_1403_p1;
wire   [0:0] icmp_ln67_45_fu_1413_p2;
wire   [0:0] icmp_ln67_44_fu_1407_p2;
wire   [0:0] or_ln67_22_fu_1419_p2;
wire   [0:0] and_ln67_22_fu_1425_p2;
wire   [31:0] bitcast_ln67_23_fu_1440_p1;
wire   [7:0] tmp_45_fu_1444_p4;
wire   [22:0] trunc_ln67_23_fu_1454_p1;
wire   [0:0] icmp_ln67_47_fu_1464_p2;
wire   [0:0] icmp_ln67_46_fu_1458_p2;
wire   [0:0] or_ln67_23_fu_1470_p2;
wire   [0:0] and_ln67_23_fu_1476_p2;
wire    grp_fu_287_ce;
wire   [4:0] grp_fu_287_opcode;
wire    grp_fu_292_ce;
wire   [4:0] grp_fu_292_opcode;
reg   [23:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_0_load_10_reg_1607 <= output_0_q1;
        output_0_load_11_reg_1614 <= output_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_0_load_12_reg_1631 <= output_0_q1;
        output_0_load_13_reg_1638 <= output_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_0_load_14_reg_1655 <= output_0_q1;
        output_0_load_15_reg_1662 <= output_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_0_load_16_reg_1679 <= output_0_q1;
        output_0_load_17_reg_1686 <= output_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_0_load_18_reg_1703 <= output_0_q1;
        output_0_load_19_reg_1710 <= output_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        output_0_load_20_reg_1727 <= output_0_q1;
        output_0_load_21_reg_1734 <= output_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        output_0_load_2_reg_1511 <= output_0_q1;
        output_0_load_3_reg_1518 <= output_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_0_load_4_reg_1535 <= output_0_q1;
        output_0_load_5_reg_1542 <= output_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_0_load_6_reg_1559 <= output_0_q1;
        output_0_load_7_reg_1566 <= output_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_0_load_8_reg_1583 <= output_0_q1;
        output_0_load_9_reg_1590 <= output_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_297 <= output_0_q1;
        reg_302 <= output_0_q0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_287_p0 = output_0_load_20_reg_1727;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_287_p0 = output_0_load_18_reg_1703;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_287_p0 = output_0_load_16_reg_1679;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_287_p0 = output_0_load_14_reg_1655;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_287_p0 = output_0_load_12_reg_1631;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_287_p0 = output_0_load_10_reg_1607;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_287_p0 = output_0_load_8_reg_1583;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_287_p0 = output_0_load_6_reg_1559;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_287_p0 = output_0_load_4_reg_1535;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_287_p0 = output_0_load_2_reg_1511;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_287_p0 = reg_297;
    end else begin
        grp_fu_287_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_292_p0 = output_0_load_21_reg_1734;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_292_p0 = output_0_load_19_reg_1710;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_292_p0 = output_0_load_17_reg_1686;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_292_p0 = output_0_load_15_reg_1662;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_292_p0 = output_0_load_13_reg_1638;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_292_p0 = output_0_load_11_reg_1614;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_292_p0 = output_0_load_9_reg_1590;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_292_p0 = output_0_load_7_reg_1566;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_292_p0 = output_0_load_5_reg_1542;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_292_p0 = output_0_load_3_reg_1518;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_292_p0 = reg_302;
    end else begin
        grp_fu_292_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        output_0_address0 = output_0_addr_23_reg_1746;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        output_0_address0 = output_0_addr_21_reg_1722;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        output_0_address0 = output_0_addr_19_reg_1698;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_0_address0 = output_0_addr_17_reg_1674;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        output_0_address0 = output_0_addr_15_reg_1650;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_0_address0 = output_0_addr_13_reg_1626;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        output_0_address0 = output_0_addr_11_reg_1602;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        output_0_address0 = output_0_addr_9_reg_1578;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        output_0_address0 = output_0_addr_7_reg_1554;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        output_0_address0 = output_0_addr_5_reg_1530;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_0_address0 = output_0_addr_3_reg_1506;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        output_0_address0 = output_0_addr_1_reg_1496;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output_0_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_0_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_0_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_0_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_0_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_0_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_0_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_0_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_0_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_0_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_0_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        output_0_address0 = 64'd1;
    end else begin
        output_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        output_0_address1 = output_0_addr_22_reg_1741;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        output_0_address1 = output_0_addr_20_reg_1717;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        output_0_address1 = output_0_addr_18_reg_1693;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_0_address1 = output_0_addr_16_reg_1669;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        output_0_address1 = output_0_addr_14_reg_1645;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_0_address1 = output_0_addr_12_reg_1621;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        output_0_address1 = output_0_addr_10_reg_1597;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        output_0_address1 = output_0_addr_8_reg_1573;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        output_0_address1 = output_0_addr_6_reg_1549;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        output_0_address1 = output_0_addr_4_reg_1525;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_0_address1 = output_0_addr_2_reg_1501;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        output_0_address1 = output_0_addr_reg_1491;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output_0_address1 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_0_address1 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_0_address1 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_0_address1 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_0_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_0_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_0_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_0_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_0_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_0_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_0_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        output_0_address1 = 64'd0;
    end else begin
        output_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        output_0_ce1 = 1'b1;
    end else begin
        output_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        output_0_d0 = select_ln67_23_fu_1482_p3;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        output_0_d0 = select_ln67_21_fu_1381_p3;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        output_0_d0 = select_ln67_19_fu_1283_p3;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_0_d0 = select_ln67_17_fu_1185_p3;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        output_0_d0 = select_ln67_15_fu_1087_p3;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_0_d0 = select_ln67_13_fu_989_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        output_0_d0 = select_ln67_11_fu_891_p3;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        output_0_d0 = select_ln67_9_fu_793_p3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        output_0_d0 = select_ln67_7_fu_695_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        output_0_d0 = select_ln67_5_fu_597_p3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_0_d0 = select_ln67_3_fu_499_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        output_0_d0 = select_ln67_1_fu_400_p3;
    end else begin
        output_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        output_0_d1 = select_ln67_22_fu_1431_p3;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        output_0_d1 = select_ln67_20_fu_1332_p3;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        output_0_d1 = select_ln67_18_fu_1234_p3;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_0_d1 = select_ln67_16_fu_1136_p3;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        output_0_d1 = select_ln67_14_fu_1038_p3;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_0_d1 = select_ln67_12_fu_940_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        output_0_d1 = select_ln67_10_fu_842_p3;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        output_0_d1 = select_ln67_8_fu_744_p3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        output_0_d1 = select_ln67_6_fu_646_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        output_0_d1 = select_ln67_4_fu_548_p3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_0_d1 = select_ln67_2_fu_450_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        output_0_d1 = select_ln67_fu_349_p3;
    end else begin
        output_0_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        output_0_we0 = 1'b1;
    end else begin
        output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        output_0_we1 = 1'b1;
    end else begin
        output_0_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln67_10_fu_836_p2 = (or_ln67_10_fu_830_p2 & grp_fu_606_p_dout0);

assign and_ln67_11_fu_885_p2 = (or_ln67_11_fu_879_p2 & grp_fu_1347_p_dout0);

assign and_ln67_12_fu_934_p2 = (or_ln67_12_fu_928_p2 & grp_fu_606_p_dout0);

assign and_ln67_13_fu_983_p2 = (or_ln67_13_fu_977_p2 & grp_fu_1347_p_dout0);

assign and_ln67_14_fu_1032_p2 = (or_ln67_14_fu_1026_p2 & grp_fu_606_p_dout0);

assign and_ln67_15_fu_1081_p2 = (or_ln67_15_fu_1075_p2 & grp_fu_1347_p_dout0);

assign and_ln67_16_fu_1130_p2 = (or_ln67_16_fu_1124_p2 & grp_fu_606_p_dout0);

assign and_ln67_17_fu_1179_p2 = (or_ln67_17_fu_1173_p2 & grp_fu_1347_p_dout0);

assign and_ln67_18_fu_1228_p2 = (or_ln67_18_fu_1222_p2 & grp_fu_606_p_dout0);

assign and_ln67_19_fu_1277_p2 = (or_ln67_19_fu_1271_p2 & grp_fu_1347_p_dout0);

assign and_ln67_1_fu_394_p2 = (or_ln67_1_fu_388_p2 & grp_fu_1347_p_dout0);

assign and_ln67_20_fu_1326_p2 = (or_ln67_20_fu_1320_p2 & grp_fu_606_p_dout0);

assign and_ln67_21_fu_1375_p2 = (or_ln67_21_fu_1369_p2 & grp_fu_1347_p_dout0);

assign and_ln67_22_fu_1425_p2 = (or_ln67_22_fu_1419_p2 & grp_fu_606_p_dout0);

assign and_ln67_23_fu_1476_p2 = (or_ln67_23_fu_1470_p2 & grp_fu_1347_p_dout0);

assign and_ln67_2_fu_444_p2 = (or_ln67_2_fu_438_p2 & grp_fu_606_p_dout0);

assign and_ln67_3_fu_493_p2 = (or_ln67_3_fu_487_p2 & grp_fu_1347_p_dout0);

assign and_ln67_4_fu_542_p2 = (or_ln67_4_fu_536_p2 & grp_fu_606_p_dout0);

assign and_ln67_5_fu_591_p2 = (or_ln67_5_fu_585_p2 & grp_fu_1347_p_dout0);

assign and_ln67_6_fu_640_p2 = (or_ln67_6_fu_634_p2 & grp_fu_606_p_dout0);

assign and_ln67_7_fu_689_p2 = (or_ln67_7_fu_683_p2 & grp_fu_1347_p_dout0);

assign and_ln67_8_fu_738_p2 = (or_ln67_8_fu_732_p2 & grp_fu_606_p_dout0);

assign and_ln67_9_fu_787_p2 = (or_ln67_9_fu_781_p2 & grp_fu_1347_p_dout0);

assign and_ln67_fu_343_p2 = (or_ln67_fu_337_p2 & grp_fu_606_p_dout0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln67_10_fu_801_p1 = output_0_load_10_reg_1607;

assign bitcast_ln67_11_fu_850_p1 = output_0_load_11_reg_1614;

assign bitcast_ln67_12_fu_899_p1 = output_0_load_12_reg_1631;

assign bitcast_ln67_13_fu_948_p1 = output_0_load_13_reg_1638;

assign bitcast_ln67_14_fu_997_p1 = output_0_load_14_reg_1655;

assign bitcast_ln67_15_fu_1046_p1 = output_0_load_15_reg_1662;

assign bitcast_ln67_16_fu_1095_p1 = output_0_load_16_reg_1679;

assign bitcast_ln67_17_fu_1144_p1 = output_0_load_17_reg_1686;

assign bitcast_ln67_18_fu_1193_p1 = output_0_load_18_reg_1703;

assign bitcast_ln67_19_fu_1242_p1 = output_0_load_19_reg_1710;

assign bitcast_ln67_1_fu_358_p1 = reg_302;

assign bitcast_ln67_20_fu_1291_p1 = output_0_load_20_reg_1727;

assign bitcast_ln67_21_fu_1340_p1 = output_0_load_21_reg_1734;

assign bitcast_ln67_22_fu_1389_p1 = reg_297;

assign bitcast_ln67_23_fu_1440_p1 = reg_302;

assign bitcast_ln67_2_fu_409_p1 = output_0_load_2_reg_1511;

assign bitcast_ln67_3_fu_458_p1 = output_0_load_3_reg_1518;

assign bitcast_ln67_4_fu_507_p1 = output_0_load_4_reg_1535;

assign bitcast_ln67_5_fu_556_p1 = output_0_load_5_reg_1542;

assign bitcast_ln67_6_fu_605_p1 = output_0_load_6_reg_1559;

assign bitcast_ln67_7_fu_654_p1 = output_0_load_7_reg_1566;

assign bitcast_ln67_8_fu_703_p1 = output_0_load_8_reg_1583;

assign bitcast_ln67_9_fu_752_p1 = output_0_load_9_reg_1590;

assign bitcast_ln67_fu_307_p1 = reg_297;

assign grp_fu_1347_p_ce = 1'b1;

assign grp_fu_1347_p_din0 = grp_fu_292_p0;

assign grp_fu_1347_p_din1 = 32'd0;

assign grp_fu_1347_p_opcode = 5'd4;

assign grp_fu_287_ce = 1'b1;

assign grp_fu_287_opcode = 5'd4;

assign grp_fu_287_p1 = 32'd0;

assign grp_fu_287_p2 = grp_fu_606_p_dout0;

assign grp_fu_292_ce = 1'b1;

assign grp_fu_292_opcode = 5'd4;

assign grp_fu_292_p1 = 32'd0;

assign grp_fu_292_p2 = grp_fu_1347_p_dout0;

assign grp_fu_606_p_ce = 1'b1;

assign grp_fu_606_p_din0 = grp_fu_287_p0;

assign grp_fu_606_p_din1 = 32'd0;

assign grp_fu_606_p_opcode = 5'd4;

assign icmp_ln67_10_fu_573_p2 = ((tmp_9_fu_559_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_11_fu_579_p2 = ((trunc_ln67_5_fu_569_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_12_fu_622_p2 = ((tmp_11_fu_608_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_13_fu_628_p2 = ((trunc_ln67_6_fu_618_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_14_fu_671_p2 = ((tmp_13_fu_657_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_15_fu_677_p2 = ((trunc_ln67_7_fu_667_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_16_fu_720_p2 = ((tmp_15_fu_706_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_17_fu_726_p2 = ((trunc_ln67_8_fu_716_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_18_fu_769_p2 = ((tmp_17_fu_755_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_19_fu_775_p2 = ((trunc_ln67_9_fu_765_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_1_fu_331_p2 = ((trunc_ln67_fu_321_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_20_fu_818_p2 = ((tmp_19_fu_804_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_21_fu_824_p2 = ((trunc_ln67_10_fu_814_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_22_fu_867_p2 = ((tmp_21_fu_853_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_23_fu_873_p2 = ((trunc_ln67_11_fu_863_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_24_fu_916_p2 = ((tmp_23_fu_902_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_25_fu_922_p2 = ((trunc_ln67_12_fu_912_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_26_fu_965_p2 = ((tmp_25_fu_951_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_27_fu_971_p2 = ((trunc_ln67_13_fu_961_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_28_fu_1014_p2 = ((tmp_27_fu_1000_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_29_fu_1020_p2 = ((trunc_ln67_14_fu_1010_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_2_fu_376_p2 = ((tmp_1_fu_362_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_30_fu_1063_p2 = ((tmp_29_fu_1049_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_31_fu_1069_p2 = ((trunc_ln67_15_fu_1059_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_32_fu_1112_p2 = ((tmp_31_fu_1098_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_33_fu_1118_p2 = ((trunc_ln67_16_fu_1108_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_34_fu_1161_p2 = ((tmp_33_fu_1147_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_35_fu_1167_p2 = ((trunc_ln67_17_fu_1157_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_36_fu_1210_p2 = ((tmp_35_fu_1196_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_37_fu_1216_p2 = ((trunc_ln67_18_fu_1206_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_38_fu_1259_p2 = ((tmp_37_fu_1245_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_39_fu_1265_p2 = ((trunc_ln67_19_fu_1255_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_3_fu_382_p2 = ((trunc_ln67_1_fu_372_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_40_fu_1308_p2 = ((tmp_39_fu_1294_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_41_fu_1314_p2 = ((trunc_ln67_20_fu_1304_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_42_fu_1357_p2 = ((tmp_41_fu_1343_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_43_fu_1363_p2 = ((trunc_ln67_21_fu_1353_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_44_fu_1407_p2 = ((tmp_43_fu_1393_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_45_fu_1413_p2 = ((trunc_ln67_22_fu_1403_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_46_fu_1458_p2 = ((tmp_45_fu_1444_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_47_fu_1464_p2 = ((trunc_ln67_23_fu_1454_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_4_fu_426_p2 = ((tmp_3_fu_412_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_5_fu_432_p2 = ((trunc_ln67_2_fu_422_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_6_fu_475_p2 = ((tmp_5_fu_461_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_7_fu_481_p2 = ((trunc_ln67_3_fu_471_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_8_fu_524_p2 = ((tmp_7_fu_510_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_9_fu_530_p2 = ((trunc_ln67_4_fu_520_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_325_p2 = ((tmp_fu_311_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln67_10_fu_830_p2 = (icmp_ln67_21_fu_824_p2 | icmp_ln67_20_fu_818_p2);

assign or_ln67_11_fu_879_p2 = (icmp_ln67_23_fu_873_p2 | icmp_ln67_22_fu_867_p2);

assign or_ln67_12_fu_928_p2 = (icmp_ln67_25_fu_922_p2 | icmp_ln67_24_fu_916_p2);

assign or_ln67_13_fu_977_p2 = (icmp_ln67_27_fu_971_p2 | icmp_ln67_26_fu_965_p2);

assign or_ln67_14_fu_1026_p2 = (icmp_ln67_29_fu_1020_p2 | icmp_ln67_28_fu_1014_p2);

assign or_ln67_15_fu_1075_p2 = (icmp_ln67_31_fu_1069_p2 | icmp_ln67_30_fu_1063_p2);

assign or_ln67_16_fu_1124_p2 = (icmp_ln67_33_fu_1118_p2 | icmp_ln67_32_fu_1112_p2);

assign or_ln67_17_fu_1173_p2 = (icmp_ln67_35_fu_1167_p2 | icmp_ln67_34_fu_1161_p2);

assign or_ln67_18_fu_1222_p2 = (icmp_ln67_37_fu_1216_p2 | icmp_ln67_36_fu_1210_p2);

assign or_ln67_19_fu_1271_p2 = (icmp_ln67_39_fu_1265_p2 | icmp_ln67_38_fu_1259_p2);

assign or_ln67_1_fu_388_p2 = (icmp_ln67_3_fu_382_p2 | icmp_ln67_2_fu_376_p2);

assign or_ln67_20_fu_1320_p2 = (icmp_ln67_41_fu_1314_p2 | icmp_ln67_40_fu_1308_p2);

assign or_ln67_21_fu_1369_p2 = (icmp_ln67_43_fu_1363_p2 | icmp_ln67_42_fu_1357_p2);

assign or_ln67_22_fu_1419_p2 = (icmp_ln67_45_fu_1413_p2 | icmp_ln67_44_fu_1407_p2);

assign or_ln67_23_fu_1470_p2 = (icmp_ln67_47_fu_1464_p2 | icmp_ln67_46_fu_1458_p2);

assign or_ln67_2_fu_438_p2 = (icmp_ln67_5_fu_432_p2 | icmp_ln67_4_fu_426_p2);

assign or_ln67_3_fu_487_p2 = (icmp_ln67_7_fu_481_p2 | icmp_ln67_6_fu_475_p2);

assign or_ln67_4_fu_536_p2 = (icmp_ln67_9_fu_530_p2 | icmp_ln67_8_fu_524_p2);

assign or_ln67_5_fu_585_p2 = (icmp_ln67_11_fu_579_p2 | icmp_ln67_10_fu_573_p2);

assign or_ln67_6_fu_634_p2 = (icmp_ln67_13_fu_628_p2 | icmp_ln67_12_fu_622_p2);

assign or_ln67_7_fu_683_p2 = (icmp_ln67_15_fu_677_p2 | icmp_ln67_14_fu_671_p2);

assign or_ln67_8_fu_732_p2 = (icmp_ln67_17_fu_726_p2 | icmp_ln67_16_fu_720_p2);

assign or_ln67_9_fu_781_p2 = (icmp_ln67_19_fu_775_p2 | icmp_ln67_18_fu_769_p2);

assign or_ln67_fu_337_p2 = (icmp_ln67_fu_325_p2 | icmp_ln67_1_fu_331_p2);

assign output_0_addr_10_reg_1597 = 64'd10;

assign output_0_addr_11_reg_1602 = 64'd11;

assign output_0_addr_12_reg_1621 = 64'd12;

assign output_0_addr_13_reg_1626 = 64'd13;

assign output_0_addr_14_reg_1645 = 64'd14;

assign output_0_addr_15_reg_1650 = 64'd15;

assign output_0_addr_16_reg_1669 = 64'd16;

assign output_0_addr_17_reg_1674 = 64'd17;

assign output_0_addr_18_reg_1693 = 64'd18;

assign output_0_addr_19_reg_1698 = 64'd19;

assign output_0_addr_1_reg_1496 = 64'd1;

assign output_0_addr_20_reg_1717 = 64'd20;

assign output_0_addr_21_reg_1722 = 64'd21;

assign output_0_addr_22_reg_1741 = 64'd22;

assign output_0_addr_23_reg_1746 = 64'd23;

assign output_0_addr_2_reg_1501 = 64'd2;

assign output_0_addr_3_reg_1506 = 64'd3;

assign output_0_addr_4_reg_1525 = 64'd4;

assign output_0_addr_5_reg_1530 = 64'd5;

assign output_0_addr_6_reg_1549 = 64'd6;

assign output_0_addr_7_reg_1554 = 64'd7;

assign output_0_addr_8_reg_1573 = 64'd8;

assign output_0_addr_9_reg_1578 = 64'd9;

assign output_0_addr_reg_1491 = 64'd0;

assign select_ln67_10_fu_842_p3 = ((and_ln67_10_fu_836_p2[0:0] == 1'b1) ? 32'd0 : output_0_load_10_reg_1607);

assign select_ln67_11_fu_891_p3 = ((and_ln67_11_fu_885_p2[0:0] == 1'b1) ? 32'd0 : output_0_load_11_reg_1614);

assign select_ln67_12_fu_940_p3 = ((and_ln67_12_fu_934_p2[0:0] == 1'b1) ? 32'd0 : output_0_load_12_reg_1631);

assign select_ln67_13_fu_989_p3 = ((and_ln67_13_fu_983_p2[0:0] == 1'b1) ? 32'd0 : output_0_load_13_reg_1638);

assign select_ln67_14_fu_1038_p3 = ((and_ln67_14_fu_1032_p2[0:0] == 1'b1) ? 32'd0 : output_0_load_14_reg_1655);

assign select_ln67_15_fu_1087_p3 = ((and_ln67_15_fu_1081_p2[0:0] == 1'b1) ? 32'd0 : output_0_load_15_reg_1662);

assign select_ln67_16_fu_1136_p3 = ((and_ln67_16_fu_1130_p2[0:0] == 1'b1) ? 32'd0 : output_0_load_16_reg_1679);

assign select_ln67_17_fu_1185_p3 = ((and_ln67_17_fu_1179_p2[0:0] == 1'b1) ? 32'd0 : output_0_load_17_reg_1686);

assign select_ln67_18_fu_1234_p3 = ((and_ln67_18_fu_1228_p2[0:0] == 1'b1) ? 32'd0 : output_0_load_18_reg_1703);

assign select_ln67_19_fu_1283_p3 = ((and_ln67_19_fu_1277_p2[0:0] == 1'b1) ? 32'd0 : output_0_load_19_reg_1710);

assign select_ln67_1_fu_400_p3 = ((and_ln67_1_fu_394_p2[0:0] == 1'b1) ? 32'd0 : reg_302);

assign select_ln67_20_fu_1332_p3 = ((and_ln67_20_fu_1326_p2[0:0] == 1'b1) ? 32'd0 : output_0_load_20_reg_1727);

assign select_ln67_21_fu_1381_p3 = ((and_ln67_21_fu_1375_p2[0:0] == 1'b1) ? 32'd0 : output_0_load_21_reg_1734);

assign select_ln67_22_fu_1431_p3 = ((and_ln67_22_fu_1425_p2[0:0] == 1'b1) ? 32'd0 : reg_297);

assign select_ln67_23_fu_1482_p3 = ((and_ln67_23_fu_1476_p2[0:0] == 1'b1) ? 32'd0 : reg_302);

assign select_ln67_2_fu_450_p3 = ((and_ln67_2_fu_444_p2[0:0] == 1'b1) ? 32'd0 : output_0_load_2_reg_1511);

assign select_ln67_3_fu_499_p3 = ((and_ln67_3_fu_493_p2[0:0] == 1'b1) ? 32'd0 : output_0_load_3_reg_1518);

assign select_ln67_4_fu_548_p3 = ((and_ln67_4_fu_542_p2[0:0] == 1'b1) ? 32'd0 : output_0_load_4_reg_1535);

assign select_ln67_5_fu_597_p3 = ((and_ln67_5_fu_591_p2[0:0] == 1'b1) ? 32'd0 : output_0_load_5_reg_1542);

assign select_ln67_6_fu_646_p3 = ((and_ln67_6_fu_640_p2[0:0] == 1'b1) ? 32'd0 : output_0_load_6_reg_1559);

assign select_ln67_7_fu_695_p3 = ((and_ln67_7_fu_689_p2[0:0] == 1'b1) ? 32'd0 : output_0_load_7_reg_1566);

assign select_ln67_8_fu_744_p3 = ((and_ln67_8_fu_738_p2[0:0] == 1'b1) ? 32'd0 : output_0_load_8_reg_1583);

assign select_ln67_9_fu_793_p3 = ((and_ln67_9_fu_787_p2[0:0] == 1'b1) ? 32'd0 : output_0_load_9_reg_1590);

assign select_ln67_fu_349_p3 = ((and_ln67_fu_343_p2[0:0] == 1'b1) ? 32'd0 : reg_297);

assign tmp_11_fu_608_p4 = {{bitcast_ln67_6_fu_605_p1[30:23]}};

assign tmp_13_fu_657_p4 = {{bitcast_ln67_7_fu_654_p1[30:23]}};

assign tmp_15_fu_706_p4 = {{bitcast_ln67_8_fu_703_p1[30:23]}};

assign tmp_17_fu_755_p4 = {{bitcast_ln67_9_fu_752_p1[30:23]}};

assign tmp_19_fu_804_p4 = {{bitcast_ln67_10_fu_801_p1[30:23]}};

assign tmp_1_fu_362_p4 = {{bitcast_ln67_1_fu_358_p1[30:23]}};

assign tmp_21_fu_853_p4 = {{bitcast_ln67_11_fu_850_p1[30:23]}};

assign tmp_23_fu_902_p4 = {{bitcast_ln67_12_fu_899_p1[30:23]}};

assign tmp_25_fu_951_p4 = {{bitcast_ln67_13_fu_948_p1[30:23]}};

assign tmp_27_fu_1000_p4 = {{bitcast_ln67_14_fu_997_p1[30:23]}};

assign tmp_29_fu_1049_p4 = {{bitcast_ln67_15_fu_1046_p1[30:23]}};

assign tmp_31_fu_1098_p4 = {{bitcast_ln67_16_fu_1095_p1[30:23]}};

assign tmp_33_fu_1147_p4 = {{bitcast_ln67_17_fu_1144_p1[30:23]}};

assign tmp_35_fu_1196_p4 = {{bitcast_ln67_18_fu_1193_p1[30:23]}};

assign tmp_37_fu_1245_p4 = {{bitcast_ln67_19_fu_1242_p1[30:23]}};

assign tmp_39_fu_1294_p4 = {{bitcast_ln67_20_fu_1291_p1[30:23]}};

assign tmp_3_fu_412_p4 = {{bitcast_ln67_2_fu_409_p1[30:23]}};

assign tmp_41_fu_1343_p4 = {{bitcast_ln67_21_fu_1340_p1[30:23]}};

assign tmp_43_fu_1393_p4 = {{bitcast_ln67_22_fu_1389_p1[30:23]}};

assign tmp_45_fu_1444_p4 = {{bitcast_ln67_23_fu_1440_p1[30:23]}};

assign tmp_5_fu_461_p4 = {{bitcast_ln67_3_fu_458_p1[30:23]}};

assign tmp_7_fu_510_p4 = {{bitcast_ln67_4_fu_507_p1[30:23]}};

assign tmp_9_fu_559_p4 = {{bitcast_ln67_5_fu_556_p1[30:23]}};

assign tmp_fu_311_p4 = {{bitcast_ln67_fu_307_p1[30:23]}};

assign trunc_ln67_10_fu_814_p1 = bitcast_ln67_10_fu_801_p1[22:0];

assign trunc_ln67_11_fu_863_p1 = bitcast_ln67_11_fu_850_p1[22:0];

assign trunc_ln67_12_fu_912_p1 = bitcast_ln67_12_fu_899_p1[22:0];

assign trunc_ln67_13_fu_961_p1 = bitcast_ln67_13_fu_948_p1[22:0];

assign trunc_ln67_14_fu_1010_p1 = bitcast_ln67_14_fu_997_p1[22:0];

assign trunc_ln67_15_fu_1059_p1 = bitcast_ln67_15_fu_1046_p1[22:0];

assign trunc_ln67_16_fu_1108_p1 = bitcast_ln67_16_fu_1095_p1[22:0];

assign trunc_ln67_17_fu_1157_p1 = bitcast_ln67_17_fu_1144_p1[22:0];

assign trunc_ln67_18_fu_1206_p1 = bitcast_ln67_18_fu_1193_p1[22:0];

assign trunc_ln67_19_fu_1255_p1 = bitcast_ln67_19_fu_1242_p1[22:0];

assign trunc_ln67_1_fu_372_p1 = bitcast_ln67_1_fu_358_p1[22:0];

assign trunc_ln67_20_fu_1304_p1 = bitcast_ln67_20_fu_1291_p1[22:0];

assign trunc_ln67_21_fu_1353_p1 = bitcast_ln67_21_fu_1340_p1[22:0];

assign trunc_ln67_22_fu_1403_p1 = bitcast_ln67_22_fu_1389_p1[22:0];

assign trunc_ln67_23_fu_1454_p1 = bitcast_ln67_23_fu_1440_p1[22:0];

assign trunc_ln67_2_fu_422_p1 = bitcast_ln67_2_fu_409_p1[22:0];

assign trunc_ln67_3_fu_471_p1 = bitcast_ln67_3_fu_458_p1[22:0];

assign trunc_ln67_4_fu_520_p1 = bitcast_ln67_4_fu_507_p1[22:0];

assign trunc_ln67_5_fu_569_p1 = bitcast_ln67_5_fu_556_p1[22:0];

assign trunc_ln67_6_fu_618_p1 = bitcast_ln67_6_fu_605_p1[22:0];

assign trunc_ln67_7_fu_667_p1 = bitcast_ln67_7_fu_654_p1[22:0];

assign trunc_ln67_8_fu_716_p1 = bitcast_ln67_8_fu_703_p1[22:0];

assign trunc_ln67_9_fu_765_p1 = bitcast_ln67_9_fu_752_p1[22:0];

assign trunc_ln67_fu_321_p1 = bitcast_ln67_fu_307_p1[22:0];

endmodule //nn_inference_hw_act_layer2
