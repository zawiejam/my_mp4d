// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="nn_inference_nn_inference,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.386000,HLS_SYN_LAT=30272,HLS_SYN_TPT=none,HLS_SYN_MEM=92,HLS_SYN_DSP=0,HLS_SYN_FF=21886,HLS_SYN_LUT=66834,HLS_VERSION=2020_2}" *)

module nn_inference (
        ap_clk,
        ap_rst_n,
        s_axi_AXI_CPU_AWVALID,
        s_axi_AXI_CPU_AWREADY,
        s_axi_AXI_CPU_AWADDR,
        s_axi_AXI_CPU_WVALID,
        s_axi_AXI_CPU_WREADY,
        s_axi_AXI_CPU_WDATA,
        s_axi_AXI_CPU_WSTRB,
        s_axi_AXI_CPU_ARVALID,
        s_axi_AXI_CPU_ARREADY,
        s_axi_AXI_CPU_ARADDR,
        s_axi_AXI_CPU_RVALID,
        s_axi_AXI_CPU_RREADY,
        s_axi_AXI_CPU_RDATA,
        s_axi_AXI_CPU_RRESP,
        s_axi_AXI_CPU_BVALID,
        s_axi_AXI_CPU_BREADY,
        s_axi_AXI_CPU_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_state9 = 27'd256;
parameter    ap_ST_fsm_state10 = 27'd512;
parameter    ap_ST_fsm_state11 = 27'd1024;
parameter    ap_ST_fsm_state12 = 27'd2048;
parameter    ap_ST_fsm_pp2_stage0 = 27'd4096;
parameter    ap_ST_fsm_state21 = 27'd8192;
parameter    ap_ST_fsm_pp3_stage0 = 27'd16384;
parameter    ap_ST_fsm_state30 = 27'd32768;
parameter    ap_ST_fsm_pp4_stage0 = 27'd65536;
parameter    ap_ST_fsm_state39 = 27'd131072;
parameter    ap_ST_fsm_pp5_stage0 = 27'd262144;
parameter    ap_ST_fsm_state48 = 27'd524288;
parameter    ap_ST_fsm_state49 = 27'd1048576;
parameter    ap_ST_fsm_state50 = 27'd2097152;
parameter    ap_ST_fsm_state51 = 27'd4194304;
parameter    ap_ST_fsm_state52 = 27'd8388608;
parameter    ap_ST_fsm_state53 = 27'd16777216;
parameter    ap_ST_fsm_state54 = 27'd33554432;
parameter    ap_ST_fsm_state55 = 27'd67108864;
parameter    C_S_AXI_AXI_CPU_DATA_WIDTH = 32;
parameter    C_S_AXI_AXI_CPU_ADDR_WIDTH = 13;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXI_CPU_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXI_CPU_AWVALID;
output   s_axi_AXI_CPU_AWREADY;
input  [C_S_AXI_AXI_CPU_ADDR_WIDTH - 1:0] s_axi_AXI_CPU_AWADDR;
input   s_axi_AXI_CPU_WVALID;
output   s_axi_AXI_CPU_WREADY;
input  [C_S_AXI_AXI_CPU_DATA_WIDTH - 1:0] s_axi_AXI_CPU_WDATA;
input  [C_S_AXI_AXI_CPU_WSTRB_WIDTH - 1:0] s_axi_AXI_CPU_WSTRB;
input   s_axi_AXI_CPU_ARVALID;
output   s_axi_AXI_CPU_ARREADY;
input  [C_S_AXI_AXI_CPU_ADDR_WIDTH - 1:0] s_axi_AXI_CPU_ARADDR;
output   s_axi_AXI_CPU_RVALID;
input   s_axi_AXI_CPU_RREADY;
output  [C_S_AXI_AXI_CPU_DATA_WIDTH - 1:0] s_axi_AXI_CPU_RDATA;
output  [1:0] s_axi_AXI_CPU_RRESP;
output   s_axi_AXI_CPU_BVALID;
input   s_axi_AXI_CPU_BREADY;
output  [1:0] s_axi_AXI_CPU_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_img_q0;
wire   [4:0] layer3_weights_0_address0;
reg    layer3_weights_0_ce0;
wire   [31:0] layer3_weights_0_q0;
wire   [4:0] layer3_weights_1_address0;
reg    layer3_weights_1_ce0;
wire   [31:0] layer3_weights_1_q0;
wire   [4:0] layer3_weights_2_address0;
reg    layer3_weights_2_ce0;
wire   [31:0] layer3_weights_2_q0;
wire   [4:0] layer3_weights_3_address0;
reg    layer3_weights_3_ce0;
wire   [31:0] layer3_weights_3_q0;
wire   [31:0] ap_return;
reg   [4:0] k_reg_370;
reg   [31:0] sum_reg_381;
reg   [4:0] k_1_reg_393;
reg   [31:0] sum_2_reg_404;
reg   [4:0] k_2_reg_416;
reg   [31:0] sum_4_reg_427;
reg   [4:0] k_3_reg_439;
reg   [31:0] sum_6_reg_450;
wire   [31:0] temp_output2_0_q0;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_state13_pp2_stage0_iter0;
wire    ap_block_state14_pp2_stage0_iter1;
wire    ap_block_state15_pp2_stage0_iter2;
wire    ap_block_state16_pp2_stage0_iter3;
wire    ap_block_state17_pp2_stage0_iter4;
wire    ap_block_state18_pp2_stage0_iter5;
wire    ap_block_state19_pp2_stage0_iter6;
wire    ap_block_state20_pp2_stage0_iter7;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln39_reg_1157;
wire    ap_block_state22_pp3_stage0_iter0;
wire    ap_block_state23_pp3_stage0_iter1;
wire    ap_block_state24_pp3_stage0_iter2;
wire    ap_block_state25_pp3_stage0_iter3;
wire    ap_block_state26_pp3_stage0_iter4;
wire    ap_block_state27_pp3_stage0_iter5;
wire    ap_block_state28_pp3_stage0_iter6;
wire    ap_block_state29_pp3_stage0_iter7;
wire    ap_block_pp3_stage0_11001;
wire    ap_block_state31_pp4_stage0_iter0;
wire    ap_block_state32_pp4_stage0_iter1;
wire    ap_block_state33_pp4_stage0_iter2;
wire    ap_block_state34_pp4_stage0_iter3;
wire    ap_block_state35_pp4_stage0_iter4;
wire    ap_block_state36_pp4_stage0_iter5;
wire    ap_block_state37_pp4_stage0_iter6;
wire    ap_block_state38_pp4_stage0_iter7;
wire    ap_block_pp4_stage0_11001;
wire    ap_block_state40_pp5_stage0_iter0;
wire    ap_block_state41_pp5_stage0_iter1;
wire    ap_block_state42_pp5_stage0_iter2;
wire    ap_block_state43_pp5_stage0_iter3;
wire    ap_block_state44_pp5_stage0_iter4;
wire    ap_block_state45_pp5_stage0_iter5;
wire    ap_block_state46_pp5_stage0_iter6;
wire    ap_block_state47_pp5_stage0_iter7;
wire    ap_block_pp5_stage0_11001;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
reg   [0:0] icmp_ln39_1_reg_1192;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
reg   [0:0] icmp_ln39_2_reg_1227;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter1;
reg   [0:0] icmp_ln39_3_reg_1262;
wire   [31:0] grp_fu_597_p2;
reg   [31:0] reg_620;
reg    ap_enable_reg_pp2_iter4;
reg   [0:0] icmp_ln39_reg_1157_pp2_iter3_reg;
reg    ap_enable_reg_pp3_iter4;
reg   [0:0] icmp_ln39_1_reg_1192_pp3_iter3_reg;
reg    ap_enable_reg_pp4_iter4;
reg   [0:0] icmp_ln39_2_reg_1227_pp4_iter3_reg;
reg    ap_enable_reg_pp5_iter4;
reg   [0:0] icmp_ln39_3_reg_1262_pp5_iter3_reg;
wire   [5:0] empty_13_fu_624_p2;
wire    ap_CS_fsm_state2;
wire   [4:0] empty_16_fu_641_p2;
wire    ap_CS_fsm_state4;
wire   [4:0] add_ln39_fu_658_p2;
reg   [4:0] add_ln39_reg_1151;
reg    ap_enable_reg_pp2_iter0;
reg   [4:0] add_ln39_reg_1151_pp2_iter1_reg;
reg   [4:0] add_ln39_reg_1151_pp2_iter2_reg;
reg   [4:0] add_ln39_reg_1151_pp2_iter3_reg;
reg   [4:0] add_ln39_reg_1151_pp2_iter4_reg;
wire   [0:0] icmp_ln39_fu_664_p2;
reg   [0:0] icmp_ln39_reg_1157_pp2_iter1_reg;
reg   [0:0] icmp_ln39_reg_1157_pp2_iter2_reg;
reg   [0:0] icmp_ln39_reg_1157_pp2_iter4_reg;
reg   [0:0] icmp_ln39_reg_1157_pp2_iter5_reg;
reg   [0:0] icmp_ln39_reg_1157_pp2_iter6_reg;
wire   [31:0] grp_fu_681_p3;
reg    ap_enable_reg_pp2_iter7;
wire   [4:0] add_ln39_1_fu_689_p2;
reg   [4:0] add_ln39_1_reg_1186;
reg    ap_enable_reg_pp3_iter0;
reg   [4:0] add_ln39_1_reg_1186_pp3_iter1_reg;
reg   [4:0] add_ln39_1_reg_1186_pp3_iter2_reg;
reg   [4:0] add_ln39_1_reg_1186_pp3_iter3_reg;
reg   [4:0] add_ln39_1_reg_1186_pp3_iter4_reg;
wire   [0:0] icmp_ln39_1_fu_695_p2;
reg   [0:0] icmp_ln39_1_reg_1192_pp3_iter1_reg;
reg   [0:0] icmp_ln39_1_reg_1192_pp3_iter2_reg;
reg   [0:0] icmp_ln39_1_reg_1192_pp3_iter4_reg;
reg   [0:0] icmp_ln39_1_reg_1192_pp3_iter5_reg;
reg   [0:0] icmp_ln39_1_reg_1192_pp3_iter6_reg;
wire   [31:0] grp_fu_712_p3;
reg    ap_enable_reg_pp3_iter7;
wire   [4:0] add_ln39_2_fu_720_p2;
reg   [4:0] add_ln39_2_reg_1221;
reg    ap_enable_reg_pp4_iter0;
reg   [4:0] add_ln39_2_reg_1221_pp4_iter1_reg;
reg   [4:0] add_ln39_2_reg_1221_pp4_iter2_reg;
reg   [4:0] add_ln39_2_reg_1221_pp4_iter3_reg;
reg   [4:0] add_ln39_2_reg_1221_pp4_iter4_reg;
wire   [0:0] icmp_ln39_2_fu_726_p2;
reg   [0:0] icmp_ln39_2_reg_1227_pp4_iter1_reg;
reg   [0:0] icmp_ln39_2_reg_1227_pp4_iter2_reg;
reg   [0:0] icmp_ln39_2_reg_1227_pp4_iter4_reg;
reg   [0:0] icmp_ln39_2_reg_1227_pp4_iter5_reg;
reg   [0:0] icmp_ln39_2_reg_1227_pp4_iter6_reg;
wire   [31:0] grp_fu_743_p3;
reg    ap_enable_reg_pp4_iter7;
wire   [4:0] add_ln39_3_fu_751_p2;
reg   [4:0] add_ln39_3_reg_1256;
reg    ap_enable_reg_pp5_iter0;
reg   [4:0] add_ln39_3_reg_1256_pp5_iter1_reg;
reg   [4:0] add_ln39_3_reg_1256_pp5_iter2_reg;
reg   [4:0] add_ln39_3_reg_1256_pp5_iter3_reg;
reg   [4:0] add_ln39_3_reg_1256_pp5_iter4_reg;
wire   [0:0] icmp_ln39_3_fu_757_p2;
reg   [0:0] icmp_ln39_3_reg_1262_pp5_iter1_reg;
reg   [0:0] icmp_ln39_3_reg_1262_pp5_iter2_reg;
reg   [0:0] icmp_ln39_3_reg_1262_pp5_iter4_reg;
reg   [0:0] icmp_ln39_3_reg_1262_pp5_iter5_reg;
reg   [0:0] icmp_ln39_3_reg_1262_pp5_iter6_reg;
wire   [31:0] grp_fu_774_p3;
reg    ap_enable_reg_pp5_iter7;
wire   [0:0] and_ln83_fu_818_p2;
reg   [0:0] and_ln83_reg_1291;
wire    ap_CS_fsm_state49;
wire   [31:0] max_val_1_fu_824_p3;
reg   [31:0] max_val_1_reg_1296;
wire   [0:0] and_ln83_2_fu_909_p2;
reg   [0:0] and_ln83_2_reg_1303;
wire    ap_CS_fsm_state51;
wire   [31:0] max_val_3_fu_915_p3;
reg   [31:0] max_val_3_reg_1309;
wire   [0:0] and_ln83_4_fu_999_p2;
reg   [0:0] and_ln83_4_reg_1316;
wire    ap_CS_fsm_state53;
wire   [31:0] max_val_5_fu_1005_p3;
reg   [31:0] max_val_5_reg_1321;
wire   [0:0] icmp_ln83_10_fu_1047_p2;
reg   [0:0] icmp_ln83_10_reg_1327;
wire    ap_CS_fsm_state54;
wire   [0:0] icmp_ln83_11_fu_1053_p2;
reg   [0:0] icmp_ln83_11_reg_1332;
wire   [0:0] icmp_ln83_12_fu_1059_p2;
reg   [0:0] icmp_ln83_12_reg_1337;
wire   [0:0] icmp_ln83_13_fu_1065_p2;
reg   [0:0] icmp_ln83_13_reg_1342;
wire    ap_CS_fsm_state12;
wire    grp_hw_act_layer2_fu_592_ap_ready;
wire    grp_hw_act_layer2_fu_592_ap_done;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state13;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
wire    ap_CS_fsm_state21;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state22;
reg    ap_enable_reg_pp3_iter2;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter5;
reg    ap_enable_reg_pp3_iter6;
wire    ap_CS_fsm_state30;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state31;
reg    ap_enable_reg_pp4_iter2;
reg    ap_enable_reg_pp4_iter3;
reg    ap_enable_reg_pp4_iter5;
reg    ap_enable_reg_pp4_iter6;
wire    ap_CS_fsm_state39;
wire    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state40;
reg    ap_enable_reg_pp5_iter2;
reg    ap_enable_reg_pp5_iter3;
reg    ap_enable_reg_pp5_iter5;
reg    ap_enable_reg_pp5_iter6;
reg   [4:0] temp_output_0_address0;
reg    temp_output_0_ce0;
reg    temp_output_0_we0;
reg   [31:0] temp_output_0_d0;
wire   [31:0] temp_output_0_q0;
reg    temp_output_0_ce1;
reg    temp_output_0_we1;
wire   [31:0] temp_output_0_q1;
reg   [4:0] temp_output2_0_address0;
reg    temp_output2_0_ce0;
reg    temp_output2_0_we0;
reg   [31:0] temp_output2_0_d0;
reg    temp_output2_0_ce1;
reg    temp_output2_0_we1;
wire   [31:0] temp_output2_0_q1;
wire    grp_hwmm_layer1_fu_462_ap_start;
wire    grp_hwmm_layer1_fu_462_ap_done;
wire    grp_hwmm_layer1_fu_462_ap_idle;
wire    grp_hwmm_layer1_fu_462_ap_ready;
wire   [9:0] grp_hwmm_layer1_fu_462_input_img_address0;
wire    grp_hwmm_layer1_fu_462_input_img_ce0;
wire   [4:0] grp_hwmm_layer1_fu_462_output_0_address0;
wire    grp_hwmm_layer1_fu_462_output_0_ce0;
wire    grp_hwmm_layer1_fu_462_output_0_we0;
wire   [31:0] grp_hwmm_layer1_fu_462_output_0_d0;
wire   [31:0] grp_hwmm_layer1_fu_462_grp_fu_597_p_din0;
wire   [31:0] grp_hwmm_layer1_fu_462_grp_fu_597_p_din1;
wire   [31:0] grp_hwmm_layer1_fu_462_grp_fu_597_p_dout0;
wire    grp_hwmm_layer1_fu_462_grp_fu_597_p_ce;
wire    grp_hwmm_layer2_fu_533_ap_start;
wire    grp_hwmm_layer2_fu_533_ap_done;
wire    grp_hwmm_layer2_fu_533_ap_idle;
wire    grp_hwmm_layer2_fu_533_ap_ready;
wire   [4:0] grp_hwmm_layer2_fu_533_input_0_address0;
wire    grp_hwmm_layer2_fu_533_input_0_ce0;
wire   [4:0] grp_hwmm_layer2_fu_533_output_0_address0;
wire    grp_hwmm_layer2_fu_533_output_0_ce0;
wire    grp_hwmm_layer2_fu_533_output_0_we0;
wire   [31:0] grp_hwmm_layer2_fu_533_output_0_d0;
wire   [31:0] grp_hwmm_layer2_fu_533_grp_fu_597_p_din0;
wire   [31:0] grp_hwmm_layer2_fu_533_grp_fu_597_p_din1;
wire   [31:0] grp_hwmm_layer2_fu_533_grp_fu_597_p_dout0;
wire    grp_hwmm_layer2_fu_533_grp_fu_597_p_ce;
wire    grp_hw_act_layer1_fu_587_ap_start;
wire    grp_hw_act_layer1_fu_587_ap_done;
wire    grp_hw_act_layer1_fu_587_ap_idle;
wire    grp_hw_act_layer1_fu_587_ap_ready;
wire   [4:0] grp_hw_act_layer1_fu_587_output_0_address0;
wire    grp_hw_act_layer1_fu_587_output_0_ce0;
wire    grp_hw_act_layer1_fu_587_output_0_we0;
wire   [31:0] grp_hw_act_layer1_fu_587_output_0_d0;
wire   [4:0] grp_hw_act_layer1_fu_587_output_0_address1;
wire    grp_hw_act_layer1_fu_587_output_0_ce1;
wire    grp_hw_act_layer1_fu_587_output_0_we1;
wire   [31:0] grp_hw_act_layer1_fu_587_output_0_d1;
wire   [31:0] grp_hw_act_layer1_fu_587_grp_fu_606_p_din0;
wire   [31:0] grp_hw_act_layer1_fu_587_grp_fu_606_p_din1;
wire   [4:0] grp_hw_act_layer1_fu_587_grp_fu_606_p_opcode;
wire   [0:0] grp_hw_act_layer1_fu_587_grp_fu_606_p_dout0;
wire    grp_hw_act_layer1_fu_587_grp_fu_606_p_ce;
wire   [31:0] grp_hw_act_layer1_fu_587_grp_fu_1347_p_din0;
wire   [31:0] grp_hw_act_layer1_fu_587_grp_fu_1347_p_din1;
wire   [4:0] grp_hw_act_layer1_fu_587_grp_fu_1347_p_opcode;
wire   [0:0] grp_hw_act_layer1_fu_587_grp_fu_1347_p_dout0;
wire    grp_hw_act_layer1_fu_587_grp_fu_1347_p_ce;
wire    grp_hw_act_layer2_fu_592_ap_start;
wire    grp_hw_act_layer2_fu_592_ap_idle;
wire   [4:0] grp_hw_act_layer2_fu_592_output_0_address0;
wire    grp_hw_act_layer2_fu_592_output_0_ce0;
wire    grp_hw_act_layer2_fu_592_output_0_we0;
wire   [31:0] grp_hw_act_layer2_fu_592_output_0_d0;
wire   [4:0] grp_hw_act_layer2_fu_592_output_0_address1;
wire    grp_hw_act_layer2_fu_592_output_0_ce1;
wire    grp_hw_act_layer2_fu_592_output_0_we1;
wire   [31:0] grp_hw_act_layer2_fu_592_output_0_d1;
wire   [31:0] grp_hw_act_layer2_fu_592_grp_fu_606_p_din0;
wire   [31:0] grp_hw_act_layer2_fu_592_grp_fu_606_p_din1;
wire   [4:0] grp_hw_act_layer2_fu_592_grp_fu_606_p_opcode;
wire   [0:0] grp_hw_act_layer2_fu_592_grp_fu_606_p_dout0;
wire    grp_hw_act_layer2_fu_592_grp_fu_606_p_ce;
wire   [31:0] grp_hw_act_layer2_fu_592_grp_fu_1347_p_din0;
wire   [31:0] grp_hw_act_layer2_fu_592_grp_fu_1347_p_din1;
wire   [4:0] grp_hw_act_layer2_fu_592_grp_fu_1347_p_opcode;
wire   [0:0] grp_hw_act_layer2_fu_592_grp_fu_1347_p_dout0;
wire    grp_hw_act_layer2_fu_592_grp_fu_1347_p_ce;
reg   [5:0] empty_12_reg_348;
wire   [0:0] exitcond259_fu_630_p2;
reg   [4:0] empty_15_reg_359;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond248_fu_647_p2;
reg   [4:0] ap_phi_mux_k_phi_fu_374_p4;
wire    ap_block_pp2_stage0;
reg   [4:0] ap_phi_mux_k_1_phi_fu_397_p4;
wire    ap_block_pp3_stage0;
reg   [4:0] ap_phi_mux_k_2_phi_fu_420_p4;
wire    ap_block_pp4_stage0;
reg   [4:0] ap_phi_mux_k_3_phi_fu_443_p4;
wire    ap_block_pp5_stage0;
reg    grp_hwmm_layer1_fu_462_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    grp_hwmm_layer2_fu_533_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg    grp_hw_act_layer1_fu_587_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg    grp_hw_act_layer2_fu_592_ap_start_reg;
wire    ap_CS_fsm_state11;
wire   [63:0] p_cast_fu_636_p1;
wire   [63:0] p_cast1_fu_653_p1;
wire   [63:0] k_cast_fu_670_p1;
wire   [63:0] k_1_cast_fu_701_p1;
wire   [63:0] k_2_cast_fu_732_p1;
wire   [63:0] k_3_cast_fu_763_p1;
reg   [31:0] grp_fu_597_p0;
reg   [31:0] grp_fu_597_p1;
reg   [31:0] grp_fu_606_p0;
reg   [31:0] grp_fu_606_p1;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state52;
wire   [0:0] grp_fu_681_p2;
wire   [0:0] grp_fu_712_p2;
wire   [0:0] grp_fu_743_p2;
wire   [0:0] grp_fu_774_p2;
wire   [31:0] bitcast_ln83_fu_782_p1;
wire   [7:0] tmp_fu_786_p4;
wire   [22:0] trunc_ln83_fu_796_p1;
wire   [0:0] icmp_ln83_1_fu_806_p2;
wire   [0:0] icmp_ln83_fu_800_p2;
wire   [0:0] or_ln83_2_fu_812_p2;
wire   [0:0] grp_fu_606_p2;
wire   [31:0] bitcast_ln83_1_fu_832_p1;
wire   [31:0] bitcast_ln83_2_fu_850_p1;
wire   [7:0] tmp_2_fu_836_p4;
wire   [22:0] trunc_ln83_1_fu_846_p1;
wire   [0:0] icmp_ln83_3_fu_873_p2;
wire   [0:0] icmp_ln83_2_fu_867_p2;
wire   [7:0] tmp_3_fu_853_p4;
wire   [22:0] trunc_ln83_2_fu_863_p1;
wire   [0:0] icmp_ln83_5_fu_891_p2;
wire   [0:0] icmp_ln83_4_fu_885_p2;
wire   [0:0] or_ln83_3_fu_879_p2;
wire   [0:0] or_ln83_4_fu_897_p2;
wire   [0:0] and_ln83_1_fu_903_p2;
wire   [31:0] bitcast_ln83_3_fu_922_p1;
wire   [31:0] bitcast_ln83_4_fu_940_p1;
wire   [7:0] tmp_5_fu_926_p4;
wire   [22:0] trunc_ln83_3_fu_936_p1;
wire   [0:0] icmp_ln83_7_fu_963_p2;
wire   [0:0] icmp_ln83_6_fu_957_p2;
wire   [7:0] tmp_6_fu_943_p4;
wire   [22:0] trunc_ln83_4_fu_953_p1;
wire   [0:0] icmp_ln83_9_fu_981_p2;
wire   [0:0] icmp_ln83_8_fu_975_p2;
wire   [0:0] or_ln83_5_fu_969_p2;
wire   [0:0] or_ln83_6_fu_987_p2;
wire   [0:0] and_ln83_3_fu_993_p2;
wire   [31:0] bitcast_ln83_5_fu_1012_p1;
wire   [31:0] bitcast_ln83_6_fu_1030_p1;
wire   [7:0] tmp_8_fu_1016_p4;
wire   [22:0] trunc_ln83_5_fu_1026_p1;
wire   [7:0] tmp_9_fu_1033_p4;
wire   [22:0] trunc_ln83_6_fu_1043_p1;
wire    ap_CS_fsm_state55;
wire   [0:0] or_ln83_fu_1074_p2;
wire   [1:0] zext_ln83_fu_1071_p1;
wire   [1:0] max_idx_fu_1078_p3;
wire   [0:0] or_ln83_7_fu_1090_p2;
wire   [0:0] or_ln83_8_fu_1094_p2;
wire   [0:0] and_ln83_5_fu_1098_p2;
wire   [0:0] and_ln83_6_fu_1104_p2;
wire   [0:0] or_ln83_1_fu_1118_p2;
wire   [2:0] select_ln83_fu_1110_p3;
wire  signed [2:0] sext_ln83_fu_1086_p1;
wire   [2:0] max_idx_2_fu_1123_p3;
reg    grp_fu_597_ce;
reg    grp_fu_606_ce;
reg   [4:0] grp_fu_606_opcode;
reg    grp_fu_681_in_valid;
reg    grp_fu_712_in_valid;
reg    grp_fu_743_in_valid;
reg    grp_fu_774_in_valid;
wire   [0:0] grp_fu_1347_p2;
reg   [31:0] grp_fu_1347_p0;
reg   [31:0] grp_fu_1347_p1;
reg    grp_fu_1347_ce;
reg   [4:0] grp_fu_1347_opcode;
reg   [26:0] ap_NS_fsm;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
wire   [31:0] grp_fu_681_p0;
wire   [31:0] grp_fu_712_p0;
wire   [31:0] grp_fu_743_p0;
wire   [31:0] grp_fu_774_p0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp4_iter4 = 1'b0;
#0 ap_enable_reg_pp5_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter7 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter7 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter6 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter3 = 1'b0;
#0 ap_enable_reg_pp4_iter5 = 1'b0;
#0 ap_enable_reg_pp4_iter6 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter3 = 1'b0;
#0 ap_enable_reg_pp5_iter5 = 1'b0;
#0 ap_enable_reg_pp5_iter6 = 1'b0;
#0 grp_hwmm_layer1_fu_462_ap_start_reg = 1'b0;
#0 grp_hwmm_layer2_fu_533_ap_start_reg = 1'b0;
#0 grp_hw_act_layer1_fu_587_ap_start_reg = 1'b0;
#0 grp_hw_act_layer2_fu_592_ap_start_reg = 1'b0;
end

nn_inference_layer3_weights_0 #(
    .DataWidth( 32 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
layer3_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layer3_weights_0_address0),
    .ce0(layer3_weights_0_ce0),
    .q0(layer3_weights_0_q0)
);

nn_inference_layer3_weights_1 #(
    .DataWidth( 32 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
layer3_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layer3_weights_1_address0),
    .ce0(layer3_weights_1_ce0),
    .q0(layer3_weights_1_q0)
);

nn_inference_layer3_weights_2 #(
    .DataWidth( 32 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
layer3_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layer3_weights_2_address0),
    .ce0(layer3_weights_2_ce0),
    .q0(layer3_weights_2_q0)
);

nn_inference_layer3_weights_3 #(
    .DataWidth( 32 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
layer3_weights_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layer3_weights_3_address0),
    .ce0(layer3_weights_3_ce0),
    .q0(layer3_weights_3_q0)
);

nn_inference_AXI_CPU_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXI_CPU_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXI_CPU_DATA_WIDTH ))
AXI_CPU_s_axi_U(
    .AWVALID(s_axi_AXI_CPU_AWVALID),
    .AWREADY(s_axi_AXI_CPU_AWREADY),
    .AWADDR(s_axi_AXI_CPU_AWADDR),
    .WVALID(s_axi_AXI_CPU_WVALID),
    .WREADY(s_axi_AXI_CPU_WREADY),
    .WDATA(s_axi_AXI_CPU_WDATA),
    .WSTRB(s_axi_AXI_CPU_WSTRB),
    .ARVALID(s_axi_AXI_CPU_ARVALID),
    .ARREADY(s_axi_AXI_CPU_ARREADY),
    .ARADDR(s_axi_AXI_CPU_ARADDR),
    .RVALID(s_axi_AXI_CPU_RVALID),
    .RREADY(s_axi_AXI_CPU_RREADY),
    .RDATA(s_axi_AXI_CPU_RDATA),
    .RRESP(s_axi_AXI_CPU_RRESP),
    .BVALID(s_axi_AXI_CPU_BVALID),
    .BREADY(s_axi_AXI_CPU_BREADY),
    .BRESP(s_axi_AXI_CPU_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(ap_return),
    .input_img_address0(grp_hwmm_layer1_fu_462_input_img_address0),
    .input_img_ce0(grp_hwmm_layer1_fu_462_input_img_ce0),
    .input_img_q0(input_img_q0)
);

nn_inference_temp_output_0 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
temp_output_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp_output_0_address0),
    .ce0(temp_output_0_ce0),
    .we0(temp_output_0_we0),
    .d0(temp_output_0_d0),
    .q0(temp_output_0_q0),
    .address1(grp_hw_act_layer1_fu_587_output_0_address1),
    .ce1(temp_output_0_ce1),
    .we1(temp_output_0_we1),
    .d1(grp_hw_act_layer1_fu_587_output_0_d1),
    .q1(temp_output_0_q1)
);

nn_inference_temp_output2_0 #(
    .DataWidth( 32 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
temp_output2_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp_output2_0_address0),
    .ce0(temp_output2_0_ce0),
    .we0(temp_output2_0_we0),
    .d0(temp_output2_0_d0),
    .q0(temp_output2_0_q0),
    .address1(grp_hw_act_layer2_fu_592_output_0_address1),
    .ce1(temp_output2_0_ce1),
    .we1(temp_output2_0_we1),
    .d1(grp_hw_act_layer2_fu_592_output_0_d1),
    .q1(temp_output2_0_q1)
);

nn_inference_hwmm_layer1 grp_hwmm_layer1_fu_462(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_hwmm_layer1_fu_462_ap_start),
    .ap_done(grp_hwmm_layer1_fu_462_ap_done),
    .ap_idle(grp_hwmm_layer1_fu_462_ap_idle),
    .ap_ready(grp_hwmm_layer1_fu_462_ap_ready),
    .input_img_address0(grp_hwmm_layer1_fu_462_input_img_address0),
    .input_img_ce0(grp_hwmm_layer1_fu_462_input_img_ce0),
    .input_img_q0(input_img_q0),
    .output_0_address0(grp_hwmm_layer1_fu_462_output_0_address0),
    .output_0_ce0(grp_hwmm_layer1_fu_462_output_0_ce0),
    .output_0_we0(grp_hwmm_layer1_fu_462_output_0_we0),
    .output_0_d0(grp_hwmm_layer1_fu_462_output_0_d0),
    .grp_fu_597_p_din0(grp_hwmm_layer1_fu_462_grp_fu_597_p_din0),
    .grp_fu_597_p_din1(grp_hwmm_layer1_fu_462_grp_fu_597_p_din1),
    .grp_fu_597_p_dout0(grp_hwmm_layer1_fu_462_grp_fu_597_p_dout0),
    .grp_fu_597_p_ce(grp_hwmm_layer1_fu_462_grp_fu_597_p_ce)
);

nn_inference_hwmm_layer2 grp_hwmm_layer2_fu_533(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_hwmm_layer2_fu_533_ap_start),
    .ap_done(grp_hwmm_layer2_fu_533_ap_done),
    .ap_idle(grp_hwmm_layer2_fu_533_ap_idle),
    .ap_ready(grp_hwmm_layer2_fu_533_ap_ready),
    .input_0_address0(grp_hwmm_layer2_fu_533_input_0_address0),
    .input_0_ce0(grp_hwmm_layer2_fu_533_input_0_ce0),
    .input_0_q0(temp_output_0_q0),
    .output_0_address0(grp_hwmm_layer2_fu_533_output_0_address0),
    .output_0_ce0(grp_hwmm_layer2_fu_533_output_0_ce0),
    .output_0_we0(grp_hwmm_layer2_fu_533_output_0_we0),
    .output_0_d0(grp_hwmm_layer2_fu_533_output_0_d0),
    .grp_fu_597_p_din0(grp_hwmm_layer2_fu_533_grp_fu_597_p_din0),
    .grp_fu_597_p_din1(grp_hwmm_layer2_fu_533_grp_fu_597_p_din1),
    .grp_fu_597_p_dout0(grp_hwmm_layer2_fu_533_grp_fu_597_p_dout0),
    .grp_fu_597_p_ce(grp_hwmm_layer2_fu_533_grp_fu_597_p_ce)
);

nn_inference_hw_act_layer1 grp_hw_act_layer1_fu_587(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_hw_act_layer1_fu_587_ap_start),
    .ap_done(grp_hw_act_layer1_fu_587_ap_done),
    .ap_idle(grp_hw_act_layer1_fu_587_ap_idle),
    .ap_ready(grp_hw_act_layer1_fu_587_ap_ready),
    .output_0_address0(grp_hw_act_layer1_fu_587_output_0_address0),
    .output_0_ce0(grp_hw_act_layer1_fu_587_output_0_ce0),
    .output_0_we0(grp_hw_act_layer1_fu_587_output_0_we0),
    .output_0_d0(grp_hw_act_layer1_fu_587_output_0_d0),
    .output_0_q0(temp_output_0_q0),
    .output_0_address1(grp_hw_act_layer1_fu_587_output_0_address1),
    .output_0_ce1(grp_hw_act_layer1_fu_587_output_0_ce1),
    .output_0_we1(grp_hw_act_layer1_fu_587_output_0_we1),
    .output_0_d1(grp_hw_act_layer1_fu_587_output_0_d1),
    .output_0_q1(temp_output_0_q1),
    .grp_fu_606_p_din0(grp_hw_act_layer1_fu_587_grp_fu_606_p_din0),
    .grp_fu_606_p_din1(grp_hw_act_layer1_fu_587_grp_fu_606_p_din1),
    .grp_fu_606_p_opcode(grp_hw_act_layer1_fu_587_grp_fu_606_p_opcode),
    .grp_fu_606_p_dout0(grp_hw_act_layer1_fu_587_grp_fu_606_p_dout0),
    .grp_fu_606_p_ce(grp_hw_act_layer1_fu_587_grp_fu_606_p_ce),
    .grp_fu_1347_p_din0(grp_hw_act_layer1_fu_587_grp_fu_1347_p_din0),
    .grp_fu_1347_p_din1(grp_hw_act_layer1_fu_587_grp_fu_1347_p_din1),
    .grp_fu_1347_p_opcode(grp_hw_act_layer1_fu_587_grp_fu_1347_p_opcode),
    .grp_fu_1347_p_dout0(grp_hw_act_layer1_fu_587_grp_fu_1347_p_dout0),
    .grp_fu_1347_p_ce(grp_hw_act_layer1_fu_587_grp_fu_1347_p_ce)
);

nn_inference_hw_act_layer2 grp_hw_act_layer2_fu_592(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_hw_act_layer2_fu_592_ap_start),
    .ap_done(grp_hw_act_layer2_fu_592_ap_done),
    .ap_idle(grp_hw_act_layer2_fu_592_ap_idle),
    .ap_ready(grp_hw_act_layer2_fu_592_ap_ready),
    .output_0_address0(grp_hw_act_layer2_fu_592_output_0_address0),
    .output_0_ce0(grp_hw_act_layer2_fu_592_output_0_ce0),
    .output_0_we0(grp_hw_act_layer2_fu_592_output_0_we0),
    .output_0_d0(grp_hw_act_layer2_fu_592_output_0_d0),
    .output_0_q0(temp_output2_0_q0),
    .output_0_address1(grp_hw_act_layer2_fu_592_output_0_address1),
    .output_0_ce1(grp_hw_act_layer2_fu_592_output_0_ce1),
    .output_0_we1(grp_hw_act_layer2_fu_592_output_0_we1),
    .output_0_d1(grp_hw_act_layer2_fu_592_output_0_d1),
    .output_0_q1(temp_output2_0_q1),
    .grp_fu_606_p_din0(grp_hw_act_layer2_fu_592_grp_fu_606_p_din0),
    .grp_fu_606_p_din1(grp_hw_act_layer2_fu_592_grp_fu_606_p_din1),
    .grp_fu_606_p_opcode(grp_hw_act_layer2_fu_592_grp_fu_606_p_opcode),
    .grp_fu_606_p_dout0(grp_hw_act_layer2_fu_592_grp_fu_606_p_dout0),
    .grp_fu_606_p_ce(grp_hw_act_layer2_fu_592_grp_fu_606_p_ce),
    .grp_fu_1347_p_din0(grp_hw_act_layer2_fu_592_grp_fu_1347_p_din0),
    .grp_fu_1347_p_din1(grp_hw_act_layer2_fu_592_grp_fu_1347_p_din1),
    .grp_fu_1347_p_opcode(grp_hw_act_layer2_fu_592_grp_fu_1347_p_opcode),
    .grp_fu_1347_p_dout0(grp_hw_act_layer2_fu_592_grp_fu_1347_p_dout0),
    .grp_fu_1347_p_ce(grp_hw_act_layer2_fu_592_grp_fu_1347_p_ce)
);

nn_inference_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U128(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_597_p0),
    .din1(grp_fu_597_p1),
    .ce(grp_fu_597_ce),
    .dout(grp_fu_597_p2)
);

nn_inference_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U129(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_606_p0),
    .din1(grp_fu_606_p1),
    .ce(grp_fu_606_ce),
    .opcode(grp_fu_606_opcode),
    .dout(grp_fu_606_p2)
);

nn_inference_facc_32ns_32ns_1ns_32_3_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_3_no_dsp_1_U130(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .ce(1'b1),
    .in_data(reg_620),
    .in_last(grp_fu_681_p2),
    .in_valid(grp_fu_681_in_valid),
    .out_data(grp_fu_681_p3)
);

nn_inference_facc_32ns_32ns_1ns_32_3_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_3_no_dsp_1_U131(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .ce(1'b1),
    .in_data(reg_620),
    .in_last(grp_fu_712_p2),
    .in_valid(grp_fu_712_in_valid),
    .out_data(grp_fu_712_p3)
);

nn_inference_facc_32ns_32ns_1ns_32_3_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_3_no_dsp_1_U132(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .ce(1'b1),
    .in_data(reg_620),
    .in_last(grp_fu_743_p2),
    .in_valid(grp_fu_743_in_valid),
    .out_data(grp_fu_743_p3)
);

nn_inference_facc_32ns_32ns_1ns_32_3_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_3_no_dsp_1_U133(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .ce(1'b1),
    .in_data(reg_620),
    .in_last(grp_fu_774_p2),
    .in_valid(grp_fu_774_in_valid),
    .out_data(grp_fu_774_p3)
);

nn_inference_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U134(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1347_p0),
    .din1(grp_fu_1347_p1),
    .ce(grp_fu_1347_ce),
    .opcode(grp_fu_1347_opcode),
    .dout(grp_fu_1347_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((grp_hw_act_layer2_fu_592_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state13)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state13);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end else if (((grp_hw_act_layer2_fu_592_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_enable_reg_pp2_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state22) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state22)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state22);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            ap_enable_reg_pp3_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp4_exit_iter0_state31) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state30)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state31)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state31);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter6 <= ap_enable_reg_pp4_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter7 <= ap_enable_reg_pp4_iter6;
        end else if ((1'b1 == ap_CS_fsm_state30)) begin
            ap_enable_reg_pp4_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp5_exit_iter0_state40) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state39)) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state40)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state40);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter4 <= ap_enable_reg_pp5_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter5 <= ap_enable_reg_pp5_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter6 <= ap_enable_reg_pp5_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter7 <= ap_enable_reg_pp5_iter6;
        end else if ((1'b1 == ap_CS_fsm_state39)) begin
            ap_enable_reg_pp5_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_hw_act_layer1_fu_587_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_hw_act_layer1_fu_587_ap_start_reg <= 1'b1;
        end else if ((grp_hw_act_layer1_fu_587_ap_ready == 1'b1)) begin
            grp_hw_act_layer1_fu_587_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_hw_act_layer2_fu_592_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_hw_act_layer2_fu_592_ap_start_reg <= 1'b1;
        end else if ((grp_hw_act_layer2_fu_592_ap_ready == 1'b1)) begin
            grp_hw_act_layer2_fu_592_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_hwmm_layer1_fu_462_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_hwmm_layer1_fu_462_ap_start_reg <= 1'b1;
        end else if ((grp_hwmm_layer1_fu_462_ap_ready == 1'b1)) begin
            grp_hwmm_layer1_fu_462_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_hwmm_layer2_fu_533_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_hwmm_layer2_fu_533_ap_start_reg <= 1'b1;
        end else if ((grp_hwmm_layer2_fu_533_ap_ready == 1'b1)) begin
            grp_hwmm_layer2_fu_533_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond259_fu_630_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_12_reg_348 <= empty_13_fu_624_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_12_reg_348 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond248_fu_647_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_15_reg_359 <= empty_16_fu_641_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_15_reg_359 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        k_1_reg_393 <= 5'd0;
    end else if (((icmp_ln39_1_reg_1192 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        k_1_reg_393 <= add_ln39_1_reg_1186;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        k_2_reg_416 <= 5'd0;
    end else if (((icmp_ln39_2_reg_1227 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        k_2_reg_416 <= add_ln39_2_reg_1221;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        k_3_reg_439 <= 5'd0;
    end else if (((icmp_ln39_3_reg_1262 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        k_3_reg_439 <= add_ln39_3_reg_1256;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_hw_act_layer2_fu_592_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        k_reg_370 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln39_reg_1157 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        k_reg_370 <= add_ln39_reg_1151;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        sum_2_reg_404 <= 32'd0;
    end else if (((ap_enable_reg_pp3_iter7 == 1'b1) & (icmp_ln39_1_reg_1192_pp3_iter6_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        sum_2_reg_404 <= grp_fu_712_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        sum_4_reg_427 <= 32'd0;
    end else if (((ap_enable_reg_pp4_iter7 == 1'b1) & (icmp_ln39_2_reg_1227_pp4_iter6_reg == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        sum_4_reg_427 <= grp_fu_743_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        sum_6_reg_450 <= 32'd0;
    end else if (((ap_enable_reg_pp5_iter7 == 1'b1) & (icmp_ln39_3_reg_1262_pp5_iter6_reg == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        sum_6_reg_450 <= grp_fu_774_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_hw_act_layer2_fu_592_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        sum_reg_381 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter7 == 1'b1) & (icmp_ln39_reg_1157_pp2_iter6_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        sum_reg_381 <= grp_fu_681_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        add_ln39_1_reg_1186 <= add_ln39_1_fu_689_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        add_ln39_1_reg_1186_pp3_iter1_reg <= add_ln39_1_reg_1186;
        icmp_ln39_1_reg_1192 <= icmp_ln39_1_fu_695_p2;
        icmp_ln39_1_reg_1192_pp3_iter1_reg <= icmp_ln39_1_reg_1192;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        add_ln39_1_reg_1186_pp3_iter2_reg <= add_ln39_1_reg_1186_pp3_iter1_reg;
        add_ln39_1_reg_1186_pp3_iter3_reg <= add_ln39_1_reg_1186_pp3_iter2_reg;
        add_ln39_1_reg_1186_pp3_iter4_reg <= add_ln39_1_reg_1186_pp3_iter3_reg;
        icmp_ln39_1_reg_1192_pp3_iter2_reg <= icmp_ln39_1_reg_1192_pp3_iter1_reg;
        icmp_ln39_1_reg_1192_pp3_iter3_reg <= icmp_ln39_1_reg_1192_pp3_iter2_reg;
        icmp_ln39_1_reg_1192_pp3_iter4_reg <= icmp_ln39_1_reg_1192_pp3_iter3_reg;
        icmp_ln39_1_reg_1192_pp3_iter5_reg <= icmp_ln39_1_reg_1192_pp3_iter4_reg;
        icmp_ln39_1_reg_1192_pp3_iter6_reg <= icmp_ln39_1_reg_1192_pp3_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        add_ln39_2_reg_1221 <= add_ln39_2_fu_720_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        add_ln39_2_reg_1221_pp4_iter1_reg <= add_ln39_2_reg_1221;
        icmp_ln39_2_reg_1227 <= icmp_ln39_2_fu_726_p2;
        icmp_ln39_2_reg_1227_pp4_iter1_reg <= icmp_ln39_2_reg_1227;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp4_stage0_11001)) begin
        add_ln39_2_reg_1221_pp4_iter2_reg <= add_ln39_2_reg_1221_pp4_iter1_reg;
        add_ln39_2_reg_1221_pp4_iter3_reg <= add_ln39_2_reg_1221_pp4_iter2_reg;
        add_ln39_2_reg_1221_pp4_iter4_reg <= add_ln39_2_reg_1221_pp4_iter3_reg;
        icmp_ln39_2_reg_1227_pp4_iter2_reg <= icmp_ln39_2_reg_1227_pp4_iter1_reg;
        icmp_ln39_2_reg_1227_pp4_iter3_reg <= icmp_ln39_2_reg_1227_pp4_iter2_reg;
        icmp_ln39_2_reg_1227_pp4_iter4_reg <= icmp_ln39_2_reg_1227_pp4_iter3_reg;
        icmp_ln39_2_reg_1227_pp4_iter5_reg <= icmp_ln39_2_reg_1227_pp4_iter4_reg;
        icmp_ln39_2_reg_1227_pp4_iter6_reg <= icmp_ln39_2_reg_1227_pp4_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        add_ln39_3_reg_1256 <= add_ln39_3_fu_751_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        add_ln39_3_reg_1256_pp5_iter1_reg <= add_ln39_3_reg_1256;
        icmp_ln39_3_reg_1262 <= icmp_ln39_3_fu_757_p2;
        icmp_ln39_3_reg_1262_pp5_iter1_reg <= icmp_ln39_3_reg_1262;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp5_stage0_11001)) begin
        add_ln39_3_reg_1256_pp5_iter2_reg <= add_ln39_3_reg_1256_pp5_iter1_reg;
        add_ln39_3_reg_1256_pp5_iter3_reg <= add_ln39_3_reg_1256_pp5_iter2_reg;
        add_ln39_3_reg_1256_pp5_iter4_reg <= add_ln39_3_reg_1256_pp5_iter3_reg;
        icmp_ln39_3_reg_1262_pp5_iter2_reg <= icmp_ln39_3_reg_1262_pp5_iter1_reg;
        icmp_ln39_3_reg_1262_pp5_iter3_reg <= icmp_ln39_3_reg_1262_pp5_iter2_reg;
        icmp_ln39_3_reg_1262_pp5_iter4_reg <= icmp_ln39_3_reg_1262_pp5_iter3_reg;
        icmp_ln39_3_reg_1262_pp5_iter5_reg <= icmp_ln39_3_reg_1262_pp5_iter4_reg;
        icmp_ln39_3_reg_1262_pp5_iter6_reg <= icmp_ln39_3_reg_1262_pp5_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        add_ln39_reg_1151 <= add_ln39_fu_658_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        add_ln39_reg_1151_pp2_iter1_reg <= add_ln39_reg_1151;
        icmp_ln39_reg_1157 <= icmp_ln39_fu_664_p2;
        icmp_ln39_reg_1157_pp2_iter1_reg <= icmp_ln39_reg_1157;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        add_ln39_reg_1151_pp2_iter2_reg <= add_ln39_reg_1151_pp2_iter1_reg;
        add_ln39_reg_1151_pp2_iter3_reg <= add_ln39_reg_1151_pp2_iter2_reg;
        add_ln39_reg_1151_pp2_iter4_reg <= add_ln39_reg_1151_pp2_iter3_reg;
        icmp_ln39_reg_1157_pp2_iter2_reg <= icmp_ln39_reg_1157_pp2_iter1_reg;
        icmp_ln39_reg_1157_pp2_iter3_reg <= icmp_ln39_reg_1157_pp2_iter2_reg;
        icmp_ln39_reg_1157_pp2_iter4_reg <= icmp_ln39_reg_1157_pp2_iter3_reg;
        icmp_ln39_reg_1157_pp2_iter5_reg <= icmp_ln39_reg_1157_pp2_iter4_reg;
        icmp_ln39_reg_1157_pp2_iter6_reg <= icmp_ln39_reg_1157_pp2_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        and_ln83_2_reg_1303 <= and_ln83_2_fu_909_p2;
        max_val_3_reg_1309 <= max_val_3_fu_915_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        and_ln83_4_reg_1316 <= and_ln83_4_fu_999_p2;
        max_val_5_reg_1321 <= max_val_5_fu_1005_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        and_ln83_reg_1291 <= and_ln83_fu_818_p2;
        max_val_1_reg_1296 <= max_val_1_fu_824_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        icmp_ln83_10_reg_1327 <= icmp_ln83_10_fu_1047_p2;
        icmp_ln83_11_reg_1332 <= icmp_ln83_11_fu_1053_p2;
        icmp_ln83_12_reg_1337 <= icmp_ln83_12_fu_1059_p2;
        icmp_ln83_13_reg_1342 <= icmp_ln83_13_fu_1065_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln39_3_reg_1262_pp5_iter3_reg == 1'd0) & (ap_enable_reg_pp5_iter4 == 1'b1) & (1'b0 == ap_block_pp5_stage0_11001)) | ((icmp_ln39_2_reg_1227_pp4_iter3_reg == 1'd0) & (ap_enable_reg_pp4_iter4 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001)) | ((icmp_ln39_1_reg_1192_pp3_iter3_reg == 1'd0) & (ap_enable_reg_pp3_iter4 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001)) | ((icmp_ln39_reg_1157_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        reg_620 <= grp_fu_597_p2;
    end
end

always @ (*) begin
    if ((icmp_ln39_fu_664_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln39_1_fu_695_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state22 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state22 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln39_2_fu_726_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state31 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state31 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln39_3_fu_757_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state40 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state40 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter7 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter6 == 1'b0) & (ap_enable_reg_pp4_iter5 == 1'b0) & (ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter7 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter4 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter6 == 1'b0) & (ap_enable_reg_pp5_iter5 == 1'b0) & (ap_enable_reg_pp5_iter3 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter7 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0) & (ap_enable_reg_pp5_iter4 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln39_1_reg_1192 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        ap_phi_mux_k_1_phi_fu_397_p4 = add_ln39_1_reg_1186;
    end else begin
        ap_phi_mux_k_1_phi_fu_397_p4 = k_1_reg_393;
    end
end

always @ (*) begin
    if (((icmp_ln39_2_reg_1227 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        ap_phi_mux_k_2_phi_fu_420_p4 = add_ln39_2_reg_1221;
    end else begin
        ap_phi_mux_k_2_phi_fu_420_p4 = k_2_reg_416;
    end
end

always @ (*) begin
    if (((icmp_ln39_3_reg_1262 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0))) begin
        ap_phi_mux_k_3_phi_fu_443_p4 = add_ln39_3_reg_1256;
    end else begin
        ap_phi_mux_k_3_phi_fu_443_p4 = k_3_reg_439;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln39_reg_1157 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        ap_phi_mux_k_phi_fu_374_p4 = add_ln39_reg_1151;
    end else begin
        ap_phi_mux_k_phi_fu_374_p4 = k_reg_370;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_1347_ce = grp_hw_act_layer2_fu_592_grp_fu_1347_p_ce;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_1347_ce = grp_hw_act_layer1_fu_587_grp_fu_1347_p_ce;
    end else begin
        grp_fu_1347_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_1347_opcode = grp_hw_act_layer2_fu_592_grp_fu_1347_p_opcode;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_1347_opcode = grp_hw_act_layer1_fu_587_grp_fu_1347_p_opcode;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_1347_p0 = grp_hw_act_layer2_fu_592_grp_fu_1347_p_din0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_1347_p0 = grp_hw_act_layer1_fu_587_grp_fu_1347_p_din0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_1347_p1 = grp_hw_act_layer2_fu_592_grp_fu_1347_p_din1;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_1347_p1 = grp_hw_act_layer1_fu_587_grp_fu_1347_p_din1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_597_ce = grp_hwmm_layer2_fu_533_grp_fu_597_p_ce;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_597_ce = grp_hwmm_layer1_fu_462_grp_fu_597_p_ce;
    end else begin
        grp_fu_597_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_597_p0 = grp_hwmm_layer2_fu_533_grp_fu_597_p_din0;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_597_p0 = grp_hwmm_layer1_fu_462_grp_fu_597_p_din0;
    end else if ((((ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0)) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1)))) begin
        grp_fu_597_p0 = temp_output2_0_q0;
    end else begin
        grp_fu_597_p0 = temp_output2_0_q0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_597_p1 = grp_hwmm_layer2_fu_533_grp_fu_597_p_din1;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_597_p1 = grp_hwmm_layer1_fu_462_grp_fu_597_p_din1;
    end else if (((ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0))) begin
        grp_fu_597_p1 = layer3_weights_3_q0;
    end else if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        grp_fu_597_p1 = layer3_weights_2_q0;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        grp_fu_597_p1 = layer3_weights_1_q0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        grp_fu_597_p1 = layer3_weights_0_q0;
    end else begin
        grp_fu_597_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_606_ce = grp_hw_act_layer2_fu_592_grp_fu_606_p_ce;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_606_ce = grp_hw_act_layer1_fu_587_grp_fu_606_p_ce;
    end else begin
        grp_fu_606_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_606_opcode = grp_hw_act_layer2_fu_592_grp_fu_606_p_opcode;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_606_opcode = grp_hw_act_layer1_fu_587_grp_fu_606_p_opcode;
    end else if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state48))) begin
        grp_fu_606_opcode = 5'd2;
    end else begin
        grp_fu_606_opcode = 5'd2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_606_p0 = grp_hw_act_layer2_fu_592_grp_fu_606_p_din0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_606_p0 = grp_hw_act_layer1_fu_587_grp_fu_606_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_606_p0 = sum_6_reg_450;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_606_p0 = sum_4_reg_427;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_606_p0 = sum_2_reg_404;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_606_p0 = sum_reg_381;
    end else begin
        grp_fu_606_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_606_p1 = grp_hw_act_layer2_fu_592_grp_fu_606_p_din1;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_606_p1 = grp_hw_act_layer1_fu_587_grp_fu_606_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_606_p1 = max_val_5_reg_1321;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_606_p1 = max_val_3_reg_1309;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_606_p1 = max_val_1_reg_1296;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_606_p1 = 32'd3296328090;
    end else begin
        grp_fu_606_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter5 == 1'b1) & (icmp_ln39_reg_1157_pp2_iter4_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0))) begin
        grp_fu_681_in_valid = 1'b1;
    end else begin
        grp_fu_681_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter5 == 1'b1) & (icmp_ln39_1_reg_1192_pp3_iter4_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0))) begin
        grp_fu_712_in_valid = 1'b1;
    end else begin
        grp_fu_712_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter5 == 1'b1) & (icmp_ln39_2_reg_1227_pp4_iter4_reg == 1'd0) & (1'b0 == ap_block_pp4_stage0))) begin
        grp_fu_743_in_valid = 1'b1;
    end else begin
        grp_fu_743_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter5 == 1'b1) & (icmp_ln39_3_reg_1262_pp5_iter4_reg == 1'd0) & (1'b0 == ap_block_pp5_stage0))) begin
        grp_fu_774_in_valid = 1'b1;
    end else begin
        grp_fu_774_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        layer3_weights_0_ce0 = 1'b1;
    end else begin
        layer3_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        layer3_weights_1_ce0 = 1'b1;
    end else begin
        layer3_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        layer3_weights_2_ce0 = 1'b1;
    end else begin
        layer3_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        layer3_weights_3_ce0 = 1'b1;
    end else begin
        layer3_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0))) begin
        temp_output2_0_address0 = k_3_cast_fu_763_p1;
    end else if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        temp_output2_0_address0 = k_2_cast_fu_732_p1;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        temp_output2_0_address0 = k_1_cast_fu_701_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        temp_output2_0_address0 = k_cast_fu_670_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_output2_0_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_output2_0_address0 = p_cast1_fu_653_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        temp_output2_0_address0 = grp_hw_act_layer2_fu_592_output_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_output2_0_address0 = grp_hwmm_layer2_fu_533_output_0_address0;
    end else begin
        temp_output2_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001)) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((grp_hw_act_layer1_fu_587_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        temp_output2_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        temp_output2_0_ce0 = grp_hw_act_layer2_fu_592_output_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_output2_0_ce0 = grp_hwmm_layer2_fu_533_output_0_ce0;
    end else begin
        temp_output2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        temp_output2_0_ce1 = grp_hw_act_layer2_fu_592_output_0_ce1;
    end else begin
        temp_output2_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_output2_0_d0 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_output2_0_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        temp_output2_0_d0 = grp_hw_act_layer2_fu_592_output_0_d0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_output2_0_d0 = grp_hwmm_layer2_fu_533_output_0_d0;
    end else begin
        temp_output2_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond248_fu_647_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((grp_hw_act_layer1_fu_587_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        temp_output2_0_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        temp_output2_0_we0 = grp_hw_act_layer2_fu_592_output_0_we0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_output2_0_we0 = grp_hwmm_layer2_fu_533_output_0_we0;
    end else begin
        temp_output2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        temp_output2_0_we1 = grp_hw_act_layer2_fu_592_output_0_we1;
    end else begin
        temp_output2_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        temp_output_0_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp_output_0_address0 = p_cast_fu_636_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_output_0_address0 = grp_hw_act_layer1_fu_587_output_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_output_0_address0 = grp_hwmm_layer2_fu_533_input_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output_0_address0 = grp_hwmm_layer1_fu_462_output_0_address0;
    end else begin
        temp_output_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        temp_output_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_output_0_ce0 = grp_hw_act_layer1_fu_587_output_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_output_0_ce0 = grp_hwmm_layer2_fu_533_input_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output_0_ce0 = grp_hwmm_layer1_fu_462_output_0_ce0;
    end else begin
        temp_output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_output_0_ce1 = grp_hw_act_layer1_fu_587_output_0_ce1;
    end else begin
        temp_output_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        temp_output_0_d0 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp_output_0_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_output_0_d0 = grp_hw_act_layer1_fu_587_output_0_d0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output_0_d0 = grp_hwmm_layer1_fu_462_output_0_d0;
    end else begin
        temp_output_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((exitcond259_fu_630_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        temp_output_0_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_output_0_we0 = grp_hw_act_layer1_fu_587_output_0_we0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output_0_we0 = grp_hwmm_layer1_fu_462_output_0_we0;
    end else begin
        temp_output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_output_0_we1 = grp_hw_act_layer1_fu_587_output_0_we1;
    end else begin
        temp_output_0_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond259_fu_630_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond248_fu_647_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_hwmm_layer1_fu_462_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_hw_act_layer1_fu_587_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_hwmm_layer2_fu_533_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_hw_act_layer2_fu_592_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln39_fu_664_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)) & ~((ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((icmp_ln39_fu_664_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((icmp_ln39_1_fu_695_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)) & ~((ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter7 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter7 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((icmp_ln39_1_fu_695_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((icmp_ln39_2_fu_726_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone)) & ~((ap_enable_reg_pp4_iter6 == 1'b0) & (ap_enable_reg_pp4_iter7 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter6 == 1'b0) & (ap_enable_reg_pp4_iter7 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((icmp_ln39_2_fu_726_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_pp5_stage0;
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((icmp_ln39_3_fu_757_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (ap_enable_reg_pp5_iter1 == 1'b0) & (1'b0 == ap_block_pp5_stage0_subdone)) & ~((ap_enable_reg_pp5_iter6 == 1'b0) & (ap_enable_reg_pp5_iter7 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((ap_enable_reg_pp5_iter6 == 1'b0) & (ap_enable_reg_pp5_iter7 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)) | ((icmp_ln39_3_fu_757_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (ap_enable_reg_pp5_iter1 == 1'b0) & (1'b0 == ap_block_pp5_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln39_1_fu_689_p2 = (ap_phi_mux_k_1_phi_fu_397_p4 + 5'd1);

assign add_ln39_2_fu_720_p2 = (ap_phi_mux_k_2_phi_fu_420_p4 + 5'd1);

assign add_ln39_3_fu_751_p2 = (ap_phi_mux_k_3_phi_fu_443_p4 + 5'd1);

assign add_ln39_fu_658_p2 = (ap_phi_mux_k_phi_fu_374_p4 + 5'd1);

assign and_ln83_1_fu_903_p2 = (or_ln83_4_fu_897_p2 & or_ln83_3_fu_879_p2);

assign and_ln83_2_fu_909_p2 = (grp_fu_606_p2 & and_ln83_1_fu_903_p2);

assign and_ln83_3_fu_993_p2 = (or_ln83_6_fu_987_p2 & or_ln83_5_fu_969_p2);

assign and_ln83_4_fu_999_p2 = (grp_fu_606_p2 & and_ln83_3_fu_993_p2);

assign and_ln83_5_fu_1098_p2 = (or_ln83_8_fu_1094_p2 & or_ln83_7_fu_1090_p2);

assign and_ln83_6_fu_1104_p2 = (grp_fu_606_p2 & and_ln83_5_fu_1098_p2);

assign and_ln83_fu_818_p2 = (or_ln83_2_fu_812_p2 & grp_fu_606_p2);

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp3_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp3_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp3_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp3_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp4_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp4_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp4_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp4_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp4_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp5_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp5_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp5_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp5_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp5_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_return = $signed(max_idx_2_fu_1123_p3);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln83_1_fu_832_p1 = sum_2_reg_404;

assign bitcast_ln83_2_fu_850_p1 = max_val_1_reg_1296;

assign bitcast_ln83_3_fu_922_p1 = sum_4_reg_427;

assign bitcast_ln83_4_fu_940_p1 = max_val_3_reg_1309;

assign bitcast_ln83_5_fu_1012_p1 = sum_6_reg_450;

assign bitcast_ln83_6_fu_1030_p1 = max_val_5_reg_1321;

assign bitcast_ln83_fu_782_p1 = sum_reg_381;

assign empty_13_fu_624_p2 = (empty_12_reg_348 + 6'd1);

assign empty_16_fu_641_p2 = (empty_15_reg_359 + 5'd1);

assign exitcond248_fu_647_p2 = ((empty_15_reg_359 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond259_fu_630_p2 = ((empty_12_reg_348 == 6'd32) ? 1'b1 : 1'b0);

assign grp_fu_681_p2 = ((add_ln39_reg_1151_pp2_iter4_reg == 5'd24) ? 1'b1 : 1'b0);

assign grp_fu_712_p2 = ((add_ln39_1_reg_1186_pp3_iter4_reg == 5'd24) ? 1'b1 : 1'b0);

assign grp_fu_743_p2 = ((add_ln39_2_reg_1221_pp4_iter4_reg == 5'd24) ? 1'b1 : 1'b0);

assign grp_fu_774_p2 = ((add_ln39_3_reg_1256_pp5_iter4_reg == 5'd24) ? 1'b1 : 1'b0);

assign grp_hw_act_layer1_fu_587_ap_start = grp_hw_act_layer1_fu_587_ap_start_reg;

assign grp_hw_act_layer1_fu_587_grp_fu_1347_p_dout0 = grp_fu_1347_p2;

assign grp_hw_act_layer1_fu_587_grp_fu_606_p_dout0 = grp_fu_606_p2;

assign grp_hw_act_layer2_fu_592_ap_start = grp_hw_act_layer2_fu_592_ap_start_reg;

assign grp_hw_act_layer2_fu_592_grp_fu_1347_p_dout0 = grp_fu_1347_p2;

assign grp_hw_act_layer2_fu_592_grp_fu_606_p_dout0 = grp_fu_606_p2;

assign grp_hwmm_layer1_fu_462_ap_start = grp_hwmm_layer1_fu_462_ap_start_reg;

assign grp_hwmm_layer1_fu_462_grp_fu_597_p_dout0 = grp_fu_597_p2;

assign grp_hwmm_layer2_fu_533_ap_start = grp_hwmm_layer2_fu_533_ap_start_reg;

assign grp_hwmm_layer2_fu_533_grp_fu_597_p_dout0 = grp_fu_597_p2;

assign icmp_ln39_1_fu_695_p2 = ((ap_phi_mux_k_1_phi_fu_397_p4 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln39_2_fu_726_p2 = ((ap_phi_mux_k_2_phi_fu_420_p4 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln39_3_fu_757_p2 = ((ap_phi_mux_k_3_phi_fu_443_p4 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_664_p2 = ((ap_phi_mux_k_phi_fu_374_p4 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln83_10_fu_1047_p2 = ((tmp_8_fu_1016_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln83_11_fu_1053_p2 = ((trunc_ln83_5_fu_1026_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln83_12_fu_1059_p2 = ((tmp_9_fu_1033_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln83_13_fu_1065_p2 = ((trunc_ln83_6_fu_1043_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln83_1_fu_806_p2 = ((trunc_ln83_fu_796_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln83_2_fu_867_p2 = ((tmp_2_fu_836_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln83_3_fu_873_p2 = ((trunc_ln83_1_fu_846_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln83_4_fu_885_p2 = ((tmp_3_fu_853_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln83_5_fu_891_p2 = ((trunc_ln83_2_fu_863_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln83_6_fu_957_p2 = ((tmp_5_fu_926_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln83_7_fu_963_p2 = ((trunc_ln83_3_fu_936_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln83_8_fu_975_p2 = ((tmp_6_fu_943_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln83_9_fu_981_p2 = ((trunc_ln83_4_fu_953_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_800_p2 = ((tmp_fu_786_p4 != 8'd255) ? 1'b1 : 1'b0);

assign k_1_cast_fu_701_p1 = ap_phi_mux_k_1_phi_fu_397_p4;

assign k_2_cast_fu_732_p1 = ap_phi_mux_k_2_phi_fu_420_p4;

assign k_3_cast_fu_763_p1 = ap_phi_mux_k_3_phi_fu_443_p4;

assign k_cast_fu_670_p1 = ap_phi_mux_k_phi_fu_374_p4;

assign layer3_weights_0_address0 = k_cast_fu_670_p1;

assign layer3_weights_1_address0 = k_1_cast_fu_701_p1;

assign layer3_weights_2_address0 = k_2_cast_fu_732_p1;

assign layer3_weights_3_address0 = k_3_cast_fu_763_p1;

assign max_idx_2_fu_1123_p3 = ((or_ln83_1_fu_1118_p2[0:0] == 1'b1) ? select_ln83_fu_1110_p3 : sext_ln83_fu_1086_p1);

assign max_idx_fu_1078_p3 = ((or_ln83_fu_1074_p2[0:0] == 1'b1) ? zext_ln83_fu_1071_p1 : 2'd3);

assign max_val_1_fu_824_p3 = ((and_ln83_fu_818_p2[0:0] == 1'b1) ? sum_reg_381 : 32'd3296328090);

assign max_val_3_fu_915_p3 = ((and_ln83_2_fu_909_p2[0:0] == 1'b1) ? sum_2_reg_404 : max_val_1_reg_1296);

assign max_val_5_fu_1005_p3 = ((and_ln83_4_fu_999_p2[0:0] == 1'b1) ? sum_4_reg_427 : max_val_3_reg_1309);

assign or_ln83_1_fu_1118_p2 = (and_ln83_6_fu_1104_p2 | and_ln83_4_reg_1316);

assign or_ln83_2_fu_812_p2 = (icmp_ln83_fu_800_p2 | icmp_ln83_1_fu_806_p2);

assign or_ln83_3_fu_879_p2 = (icmp_ln83_3_fu_873_p2 | icmp_ln83_2_fu_867_p2);

assign or_ln83_4_fu_897_p2 = (icmp_ln83_5_fu_891_p2 | icmp_ln83_4_fu_885_p2);

assign or_ln83_5_fu_969_p2 = (icmp_ln83_7_fu_963_p2 | icmp_ln83_6_fu_957_p2);

assign or_ln83_6_fu_987_p2 = (icmp_ln83_9_fu_981_p2 | icmp_ln83_8_fu_975_p2);

assign or_ln83_7_fu_1090_p2 = (icmp_ln83_11_reg_1332 | icmp_ln83_10_reg_1327);

assign or_ln83_8_fu_1094_p2 = (icmp_ln83_13_reg_1342 | icmp_ln83_12_reg_1337);

assign or_ln83_fu_1074_p2 = (and_ln83_reg_1291 | and_ln83_2_reg_1303);

assign p_cast1_fu_653_p1 = empty_15_reg_359;

assign p_cast_fu_636_p1 = empty_12_reg_348;

assign select_ln83_fu_1110_p3 = ((and_ln83_6_fu_1104_p2[0:0] == 1'b1) ? 3'd3 : 3'd2);

assign sext_ln83_fu_1086_p1 = $signed(max_idx_fu_1078_p3);

assign tmp_2_fu_836_p4 = {{bitcast_ln83_1_fu_832_p1[30:23]}};

assign tmp_3_fu_853_p4 = {{bitcast_ln83_2_fu_850_p1[30:23]}};

assign tmp_5_fu_926_p4 = {{bitcast_ln83_3_fu_922_p1[30:23]}};

assign tmp_6_fu_943_p4 = {{bitcast_ln83_4_fu_940_p1[30:23]}};

assign tmp_8_fu_1016_p4 = {{bitcast_ln83_5_fu_1012_p1[30:23]}};

assign tmp_9_fu_1033_p4 = {{bitcast_ln83_6_fu_1030_p1[30:23]}};

assign tmp_fu_786_p4 = {{bitcast_ln83_fu_782_p1[30:23]}};

assign trunc_ln83_1_fu_846_p1 = bitcast_ln83_1_fu_832_p1[22:0];

assign trunc_ln83_2_fu_863_p1 = bitcast_ln83_2_fu_850_p1[22:0];

assign trunc_ln83_3_fu_936_p1 = bitcast_ln83_3_fu_922_p1[22:0];

assign trunc_ln83_4_fu_953_p1 = bitcast_ln83_4_fu_940_p1[22:0];

assign trunc_ln83_5_fu_1026_p1 = bitcast_ln83_5_fu_1012_p1[22:0];

assign trunc_ln83_6_fu_1043_p1 = bitcast_ln83_6_fu_1030_p1[22:0];

assign trunc_ln83_fu_796_p1 = bitcast_ln83_fu_782_p1[22:0];

assign zext_ln83_fu_1071_p1 = and_ln83_2_reg_1303;

endmodule //nn_inference
